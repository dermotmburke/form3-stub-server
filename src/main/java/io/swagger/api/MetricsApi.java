/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.MetricsQueryResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-06-29T11:48:32.556Z")

@Validated
@Api(value = "metrics", description = "the metrics API")
@RequestMapping(value = "/v1")
public interface MetricsApi {

    @ApiOperation(value = "Query Endpoint for metrics", nickname = "metricsPrometheusApiV1QueryGet", notes = "", response = MetricsQueryResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Metrics API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "See Prometheus api https://prometheus.io/docs/prometheus/latest/querying/api/#instant-queries", response = MetricsQueryResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = MetricsQueryResponse.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/metrics/prometheus/api/v1/query",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<MetricsQueryResponse> metricsPrometheusApiV1QueryGet(@NotNull @ApiParam(value = "Query to Execute", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "RFC3339 or unix_timestamp") @Valid @RequestParam(value = "time", required = false) String time,@ApiParam(value = "See https://prometheus.io/docs/prometheus/latest/querying/basics/#time-durations") @Valid @RequestParam(value = "timeout", required = false) String timeout);


    @ApiOperation(value = "Query Endpoint for metrics", nickname = "metricsPrometheusApiV1QueryPost", notes = "", response = MetricsQueryResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Metrics API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "See Prometheus api https://prometheus.io/docs/prometheus/latest/querying/api/#instant-queries", response = MetricsQueryResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = MetricsQueryResponse.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/metrics/prometheus/api/v1/query",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<MetricsQueryResponse> metricsPrometheusApiV1QueryPost(@ApiParam(value = "Query to Execute", required=true) @RequestParam(value="query", required=true)  String query,@ApiParam(value = "RFC3339 or unix_timestamp") @RequestParam(value="time", required=false)  String time,@ApiParam(value = "See https://prometheus.io/docs/prometheus/latest/querying/basics/#time-durations") @RequestParam(value="timeout", required=false)  String timeout);


    @ApiOperation(value = "Query Range Endpoint for metrics", nickname = "metricsPrometheusApiV1QueryRangeGet", notes = "", response = MetricsQueryResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Metrics API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "See Prometheus api https://prometheus.io/docs/prometheus/latest/querying/api/#instant-queries", response = MetricsQueryResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = MetricsQueryResponse.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/metrics/prometheus/api/v1/query_range",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<MetricsQueryResponse> metricsPrometheusApiV1QueryRangeGet(@NotNull @ApiParam(value = "Query to Execute", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "RFC3339 or unix_timestamp") @Valid @RequestParam(value = "time", required = false) String time,@ApiParam(value = "See https://prometheus.io/docs/prometheus/latest/querying/basics/#time-durations") @Valid @RequestParam(value = "timeout", required = false) String timeout,@ApiParam(value = "RFC3339 or unix_timestamp") @Valid @RequestParam(value = "start", required = false) String start,@ApiParam(value = "RFC3339 or unix_timestamp") @Valid @RequestParam(value = "end", required = false) String end,@ApiParam(value = "duration or float") @Valid @RequestParam(value = "step", required = false) String step);


    @ApiOperation(value = "Query Range Endpoint for metrics", nickname = "metricsPrometheusApiV1QueryRangePost", notes = "", response = MetricsQueryResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Metrics API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "See Prometheus api https://prometheus.io/docs/prometheus/latest/querying/api/#instant-queries", response = MetricsQueryResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = MetricsQueryResponse.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/metrics/prometheus/api/v1/query_range",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<MetricsQueryResponse> metricsPrometheusApiV1QueryRangePost(@ApiParam(value = "Query to Execute", required=true) @RequestParam(value="query", required=true)  String query,@ApiParam(value = "RFC3339 or unix_timestamp") @RequestParam(value="time", required=false)  String time,@ApiParam(value = "See https://prometheus.io/docs/prometheus/latest/querying/basics/#time-durations") @RequestParam(value="timeout", required=false)  String timeout,@ApiParam(value = "RFC3339 or unix_timestamp") @RequestParam(value="start", required=false)  String start,@ApiParam(value = "RFC3339 or unix_timestamp") @RequestParam(value="end", required=false)  String end,@ApiParam(value = "duration or float") @RequestParam(value="step", required=false)  String step);


    @ApiOperation(value = "Federate Endpoint for metrics", nickname = "metricsPrometheusFederateGet", notes = "", response = String.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Metrics API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "See Prometheus api https://prometheus.io/docs/prometheus/latest/querying/api/#instant-queries", response = String.class),
        @ApiResponse(code = 400, message = "Bad Request", response = MetricsQueryResponse.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/metrics/prometheus/federate",
        produces = { "text/plain" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<String> metricsPrometheusFederateGet(@NotNull @ApiParam(value = "See https://prometheus.io/docs/prometheus/latest/querying/basics/#instant-vector-selectors", required = true) @Valid @RequestParam(value = "match[]", required = true) List<String> match);

}
