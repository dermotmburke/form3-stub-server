/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ApiError;
import org.threeten.bp.OffsetDateTime;
import io.swagger.model.ReportAdmissionDetailsResponse;
import io.swagger.model.ReportDetailsListResponse;
import io.swagger.model.ReportDetailsResponse;
import io.swagger.model.SchemeMessageAdmissionDetailsResponse;
import io.swagger.model.SchemeMessageDetailsListResponse;
import io.swagger.model.SchemeMessageDetailsResponse;
import io.swagger.model.SubscriptionAmendment;
import io.swagger.model.SubscriptionCreation;
import io.swagger.model.SubscriptionCreationResponse;
import io.swagger.model.SubscriptionDeliveryErrorListResponse;
import io.swagger.model.SubscriptionDetailsListResponse;
import io.swagger.model.SubscriptionDetailsResponse;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-06-29T11:48:32.556Z")

@Validated
@Api(value = "notification", description = "the notification API")
@RequestMapping(value = "/v1")
public interface NotificationApi {

    @ApiOperation(value = "List reports", nickname = "notificationReportsGet", notes = "", response = ReportDetailsListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Reports", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of reports", response = ReportDetailsListResponse.class),
        @ApiResponse(code = 400, message = "Reports bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class) })
    @RequestMapping(value = "/notification/reports",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ReportDetailsListResponse> notificationReportsGet(@Pattern(regexp="^(first|last|[\\d]{1,4})$") @DecimalMin("0")@ApiParam(value = "Which page to select") @Valid @RequestParam(value = "page[number]", required = false) String pageNumber,@Min(0) @Max(1000) @ApiParam(value = "Number of items to select", defaultValue = "100") @Valid @RequestParam(value = "page[size]", required = false, defaultValue="100") Integer pageSize,@ApiParam(value = "Filter by organisation Ids") @Valid @RequestParam(value = "filter[organisation_id]", required = false) List<UUID> filterOrganisationId,@ApiParam(value = "Filter bu ReportType") @Valid @RequestParam(value = "filter[report_type]", required = false) String filterReportType,@ApiParam(value = "Filter by Report Type Description") @Valid @RequestParam(value = "filter[report_type_description]", required = false) String filterReportTypeDescription,@ApiParam(value = "Filter by Report Source") @Valid @RequestParam(value = "filter[report_source]", required = false) String filterReportSource,@ApiParam(value = "Request reports created after specific date time") @Valid @RequestParam(value = "filter[created_on_after]", required = false) OffsetDateTime filterCreatedOnAfter,@ApiParam(value = "Request reports created after specific date time") @Valid @RequestParam(value = "filter[created_on_before]", required = false) OffsetDateTime filterCreatedOnBefore,@ApiParam(value = "Request reports modified after specific date time") @Valid @RequestParam(value = "filter[modified_on_after]", required = false) OffsetDateTime filterModifiedOnAfter,@ApiParam(value = "Request reports modified before specific date time") @Valid @RequestParam(value = "filter[modified_on_before]", required = false) OffsetDateTime filterModifiedOnBefore);


    @ApiOperation(value = "Get Report Admission by ID", nickname = "notificationReportsIdAdmissionsAdmissionIdGet", notes = "", response = ReportAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Reports", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Get report admission by Id", response = ReportAdmissionDetailsResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 404, message = "Not Found", response = ApiError.class) })
    @RequestMapping(value = "/notification/reports/{id}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ReportAdmissionDetailsResponse> notificationReportsIdAdmissionsAdmissionIdGet(@ApiParam(value = "Report Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Report Admission ID",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Get report by ID", nickname = "notificationReportsIdGet", notes = "", response = ReportDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Reports", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Report details", response = ReportDetailsResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 404, message = "Report Not Found", response = ApiError.class),
        @ApiResponse(code = 406, message = "Report not available in acceptable format", response = ApiError.class) })
    @RequestMapping(value = "/notification/reports/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ReportDetailsResponse> notificationReportsIdGet(@ApiParam(value = "Report ID",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Acceptable Format" ,required=true) @RequestHeader(value="Accept", required=true) String accept);


    @ApiOperation(value = "List messages", nickname = "notificationSchememessagesGet", notes = "", response = SchemeMessageDetailsListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "SchemeMessages", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of scheme messages", response = SchemeMessageDetailsListResponse.class),
        @ApiResponse(code = 400, message = "Scheme Message bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class) })
    @RequestMapping(value = "/notification/schememessages",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<SchemeMessageDetailsListResponse> notificationSchememessagesGet(@Pattern(regexp="^(first|last|[\\d]{1,4})$") @DecimalMin("0")@ApiParam(value = "Which page to select") @Valid @RequestParam(value = "page[number]", required = false) String pageNumber,@Min(0) @Max(1000) @ApiParam(value = "Number of items to select", defaultValue = "100") @Valid @RequestParam(value = "page[size]", required = false, defaultValue="100") Integer pageSize,@ApiParam(value = "Filter by Unique SchemeId") @Valid @RequestParam(value = "filter[unique_scheme_id]", required = false) String filterUniqueSchemeId,@ApiParam(value = "Filter by Scheme Message Type") @Valid @RequestParam(value = "filter[scheme_message_type]", required = false) String filterSchemeMessageType,@ApiParam(value = "Filter by Payment Scheme") @Valid @RequestParam(value = "filter[payment_scheme]", required = false) String filterPaymentScheme,@ApiParam(value = "Filter by Admission DateTime") @Valid @RequestParam(value = "filter[admission.admission_date_from]", required = false) OffsetDateTime filterAdmissionAdmissionDateFrom,@ApiParam(value = "Filter by Admission DateTime") @Valid @RequestParam(value = "filter[admission.admission_date_to]", required = false) OffsetDateTime filterAdmissionAdmissionDateTo);


    @ApiOperation(value = "Get Scheme Message Admission By AdmissionId", nickname = "notificationSchememessagesIdAdmissionsAdmissionIdGet", notes = "", response = SchemeMessageAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "SchemeMessages", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Get scheme message admission by Id", response = SchemeMessageAdmissionDetailsResponse.class),
        @ApiResponse(code = 400, message = "Scheme Message Admission by Id bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 404, message = "Scheme Message Not found", response = ApiError.class) })
    @RequestMapping(value = "/notification/schememessages/{id}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<SchemeMessageAdmissionDetailsResponse> notificationSchememessagesIdAdmissionsAdmissionIdGet(@ApiParam(value = "Scheme Message Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Scheme Message Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Fetch message", nickname = "notificationSchememessagesIdGet", notes = "", response = SchemeMessageDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "SchemeMessages", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Scheme Message details", response = SchemeMessageDetailsResponse.class),
        @ApiResponse(code = 400, message = "Scheme Message bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 404, message = "Scheme Message Not found", response = ApiError.class) })
    @RequestMapping(value = "/notification/schememessages/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<SchemeMessageDetailsResponse> notificationSchememessagesIdGet(@ApiParam(value = "Scheme Message Id",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "List all subscriptions", nickname = "notificationSubscriptionsGet", notes = "", response = SubscriptionDetailsListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of subscription details", response = SubscriptionDetailsListResponse.class) })
    @RequestMapping(value = "/notification/subscriptions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<SubscriptionDetailsListResponse> notificationSubscriptionsGet(@Pattern(regexp="$[A-z0-9]{4}^") @DecimalMin("0")@ApiParam(value = "Which page to select") @Valid @RequestParam(value = "page[number]", required = false) String pageNumber,@Min(0) @Max(1000) @ApiParam(value = "Number of items to select") @Valid @RequestParam(value = "page[size]", required = false) Integer pageSize,@ApiParam(value = "Filter by event type") @Valid @RequestParam(value = "filter[event_type]", required = false) List<String> filterEventType,@ApiParam(value = "Filter by record type") @Valid @RequestParam(value = "filter[record_type]", required = false) List<String> filterRecordType,@ApiParam(value = "Filter by organisation id") @Valid @RequestParam(value = "filter[organisation_id]", required = false) List<UUID> filterOrganisationId,@ApiParam(value = "Filter by deactivated") @Valid @RequestParam(value = "filter[deactivated]", required = false) Boolean filterDeactivated,@ApiParam(value = "Filter by callback_transport") @Valid @RequestParam(value = "filter[callback_transport]", required = false) String filterCallbackTransport,@ApiParam(value = "Filter on callback_uri containing a search term") @Valid @RequestParam(value = "filter[callback_uri_search_term]", required = false) String filterCallbackUriSearchTerm,@ApiParam(value = "Filter by existence of notification filters") @Valid @RequestParam(value = "filter[notification_filter]", required = false) Boolean filterNotificationFilter);


    @ApiOperation(value = "Deletes a subscription", nickname = "notificationSubscriptionsIdDelete", notes = "", authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Subscription deleted OK. No body content will be returned") })
    @RequestMapping(value = "/notification/subscriptions/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> notificationSubscriptionsIdDelete(@ApiParam(value = "Subscription Id",required=true) @PathVariable("id") UUID id,@NotNull @Min(0)@ApiParam(value = "Version", required = true) @Valid @RequestParam(value = "version", required = true) Integer version);


    @ApiOperation(value = "List last 1000 subscription Errors", nickname = "notificationSubscriptionsIdErrorsGet", notes = "", response = SubscriptionDeliveryErrorListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Go Subscription API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Errors List Response", response = SubscriptionDeliveryErrorListResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 404, message = "Not Found", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ApiError.class) })
    @RequestMapping(value = "/notification/subscriptions/{id}/errors",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<SubscriptionDeliveryErrorListResponse> notificationSubscriptionsIdErrorsGet(@ApiParam(value = "",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "Fetch subscription", nickname = "notificationSubscriptionsIdGet", notes = "", response = SubscriptionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Subscription details", response = SubscriptionDetailsResponse.class) })
    @RequestMapping(value = "/notification/subscriptions/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<SubscriptionDetailsResponse> notificationSubscriptionsIdGet(@ApiParam(value = "Subscription Id",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "Update subscription details", nickname = "notificationSubscriptionsIdPatch", notes = "", response = SubscriptionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Subscription details", response = SubscriptionDetailsResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ApiError.class),
        @ApiResponse(code = 404, message = "Not Found", response = ApiError.class),
        @ApiResponse(code = 409, message = "Conflict", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Error", response = ApiError.class) })
    @RequestMapping(value = "/notification/subscriptions/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<SubscriptionDetailsResponse> notificationSubscriptionsIdPatch(@ApiParam(value = "Subscription Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody SubscriptionAmendment subscriptionUpdateRequest);


    @ApiOperation(value = "Create subscription", nickname = "notificationSubscriptionsPost", notes = "", response = SubscriptionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Subscription creation response", response = SubscriptionCreationResponse.class) })
    @RequestMapping(value = "/notification/subscriptions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SubscriptionCreationResponse> notificationSubscriptionsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody SubscriptionCreation subscriptionCreationRequest);

}
