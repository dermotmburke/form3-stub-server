/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ApiError;
import io.swagger.model.SigningKeysListResponse;
import io.swagger.model.SigningKeysResponse;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-06-29T11:48:32.556Z")

@Validated
@Api(value = "platform", description = "the platform API")
@RequestMapping(value = "/v1")
public interface PlatformApi {

    @ApiOperation(value = "Get a list of Signing Keys", nickname = "platformSecuritySigningKeysGet", notes = "", response = SigningKeysListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "platformsecurityapi", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "keys returned", response = SigningKeysListResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ApiError.class),
        @ApiResponse(code = 403, message = "Action Forbidden", response = ApiError.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = ApiError.class),
        @ApiResponse(code = 200, message = "Unexpected Error", response = ApiError.class) })
    @RequestMapping(value = "/platform/security/signing_keys",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<SigningKeysListResponse> platformSecuritySigningKeysGet();


    @ApiOperation(value = "Fetch a Signing Key", nickname = "platformSecuritySigningKeysSigningkeyIdGet", notes = "", response = SigningKeysResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "platformsecurityapi", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "signing key response", response = SigningKeysResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ApiError.class),
        @ApiResponse(code = 403, message = "Action Forbidden", response = ApiError.class),
        @ApiResponse(code = 404, message = "Not Found", response = ApiError.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = ApiError.class),
        @ApiResponse(code = 200, message = "Unexpected Error", response = ApiError.class) })
    @RequestMapping(value = "/platform/security/signing_keys/{signingkey_id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<SigningKeysResponse> platformSecuritySigningKeysSigningkeyIdGet(@ApiParam(value = "Signing Key ID",required=true) @PathVariable("signingkey_id") UUID signingkeyId);

}
