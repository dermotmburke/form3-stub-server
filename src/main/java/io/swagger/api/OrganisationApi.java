/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AccountAmendment;
import io.swagger.model.AccountAmendmentCreation;
import io.swagger.model.AccountAmendmentListResponse;
import io.swagger.model.AccountAmendmentResponse;
import io.swagger.model.AccountAmendmentSubmissionCreation;
import io.swagger.model.AccountAmendmentSubmissionResponse;
import io.swagger.model.AccountCreation;
import io.swagger.model.AccountCreationResponse;
import io.swagger.model.AccountDetailsListResponse;
import io.swagger.model.AccountDetailsResponse;
import io.swagger.model.AccountEventListResponse;
import io.swagger.model.AccountIdentificationListResponse;
import io.swagger.model.AccountIdentificationRequest;
import io.swagger.model.AccountIdentificationResponse;
import io.swagger.model.AccountRequestCreation;
import io.swagger.model.AccountRequestListResponse;
import io.swagger.model.AccountRequestResponse;
import io.swagger.model.AccountRequestSubmissionCreation;
import io.swagger.model.AccountRequestSubmissionResponse;
import io.swagger.model.ApiError;
import org.threeten.bp.OffsetDateTime;
import io.swagger.model.OrganisationCreation;
import io.swagger.model.OrganisationCreationResponse;
import io.swagger.model.OrganisationDetailsListResponse;
import io.swagger.model.OrganisationDetailsResponse;
import io.swagger.model.OrganisationUpdate;
import io.swagger.model.PositionDetailsListResponse;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-06-29T11:48:32.556Z")

@Validated
@Api(value = "organisation", description = "the organisation API")
@RequestMapping(value = "/v1")
public interface OrganisationApi {

    @ApiOperation(value = "List Account Amendments", nickname = "getAccountAmendments", notes = "", response = AccountAmendmentListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Account Amendment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List Account Amendments", response = AccountAmendmentListResponse.class),
        @ApiResponse(code = 400, message = "Account Amendment creation error", response = ApiError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ApiError.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = ApiError.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = ApiError.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = ApiError.class) })
    @RequestMapping(value = "/organisation/accountamendments",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AccountAmendmentListResponse> getAccountAmendments(@Pattern(regexp="^(first|last|\\d+)$") @ApiParam(value = "Which page to select", defaultValue = "0") @Valid @RequestParam(value = "page[number]", required = false, defaultValue="0") String pageNumber,@Min(0) @Max(1000) @ApiParam(value = "Number of items to select", defaultValue = "100") @Valid @RequestParam(value = "page[size]", required = false, defaultValue="100") Integer pageSize,@ApiParam(value = "Filter by organisationID") @Valid @RequestParam(value = "filter[organisation_id]", required = false) UUID filterOrganisationId,@ApiParam(value = "Filter by account ID") @Valid @RequestParam(value = "filter[account_id]", required = false) UUID filterAccountId,@ApiParam(value = "Filter account request submission status", allowableValues = "accepted, validation_pending, validation_passed, released_to_gateway, submitted, delivery_confirmed, delivery_failed") @Valid @RequestParam(value = "filter[submission.status]", required = false) String filterSubmissionStatus,@Size(min=1) @ApiParam(value = "Filter account amendments submission by date from") @Valid @RequestParam(value = "filter[submission.submission_date_from]", required = false) OffsetDateTime filterSubmissionSubmissionDateFrom,@Size(min=1) @ApiParam(value = "Filter account amendments submission by date to") @Valid @RequestParam(value = "filter[submission.submission_date_to]", required = false) OffsetDateTime filterSubmissionSubmissionDateTo);


    @ApiOperation(value = "Get Specific Account Amendment", nickname = "getAccountAmendmentsID", notes = "", response = AccountAmendmentResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Account Amendment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Account Amendment Details", response = AccountAmendmentResponse.class),
        @ApiResponse(code = 400, message = "Account Request creation error", response = ApiError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 404, message = "Not Found", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ApiError.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = ApiError.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = ApiError.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = ApiError.class) })
    @RequestMapping(value = "/organisation/accountamendments/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AccountAmendmentResponse> getAccountAmendmentsID(@ApiParam(value = "Account Amendment ID",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "", nickname = "getAccountAmendmentsIDSubmissionsSubmissionID", notes = "", response = AccountAmendmentSubmissionResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Account Amendment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Account Amendment Submission details", response = AccountAmendmentSubmissionResponse.class),
        @ApiResponse(code = 400, message = "Account Amendment creation error", response = ApiError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 404, message = "Not Found", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ApiError.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = ApiError.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = ApiError.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = ApiError.class) })
    @RequestMapping(value = "/organisation/accountamendments/{id}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AccountAmendmentSubmissionResponse> getAccountAmendmentsIDSubmissionsSubmissionID(@ApiParam(value = "Account Amendment ID",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Account Amendment Submission ID",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "List Account Requests", nickname = "getAccountRequests", notes = "", response = AccountRequestListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Account Request", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List Account Requests", response = AccountRequestListResponse.class),
        @ApiResponse(code = 400, message = "Account Request creation error", response = ApiError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ApiError.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = ApiError.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = ApiError.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = ApiError.class) })
    @RequestMapping(value = "/organisation/accountrequests",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AccountRequestListResponse> getAccountRequests(@Pattern(regexp="^(first|last|\\d+)$") @ApiParam(value = "Which page to select", defaultValue = "0") @Valid @RequestParam(value = "page[number]", required = false, defaultValue="0") String pageNumber,@Min(0) @Max(1000) @ApiParam(value = "Number of items to select", defaultValue = "100") @Valid @RequestParam(value = "page[size]", required = false, defaultValue="100") Integer pageSize,@ApiParam(value = "Filter by organisationID") @Valid @RequestParam(value = "filter[organisation_id]", required = false) UUID filterOrganisationId,@Pattern(regexp="^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$") @Size(min=1) @ApiParam(value = "Filter by BIC") @Valid @RequestParam(value = "filter[bic]", required = false) String filterBic,@Pattern(regexp="^[A-Z0-9]{0,16}$") @Size(min=1) @ApiParam(value = "Filter by BankID") @Valid @RequestParam(value = "filter[bank_id]", required = false) String filterBankId,@Pattern(regexp="^[A-Z]{2}[0-9]{2}[A-Z0-9]{0,64}$") @Size(min=1) @ApiParam(value = "Filter by IBAN") @Valid @RequestParam(value = "filter[iban]", required = false) String filterIban,@Pattern(regexp="^[A-Z0-9]{0,64}$") @Size(min=1) @ApiParam(value = "Filter by account number") @Valid @RequestParam(value = "filter[account_number]", required = false) String filterAccountNumber,@Pattern(regexp="^[A-Za-z]{2}$") @Size(min=2) @ApiParam(value = "Filter by country ISO 3166-1 alpha-2") @Valid @RequestParam(value = "filter[country]", required = false) String filterCountry,@ApiParam(value = "Filter account request submission status", allowableValues = "accepted, validation_pending, validation_passed, released_to_gateway, submitted, delivery_confirmed, delivery_failed") @Valid @RequestParam(value = "filter[submission.status]", required = false) String filterSubmissionStatus,@Size(min=1) @ApiParam(value = "Filter account request submission by date from") @Valid @RequestParam(value = "filter[submission.submission_date_from]", required = false) OffsetDateTime filterSubmissionSubmissionDateFrom,@Size(min=1) @ApiParam(value = "Filter account request submission by date to") @Valid @RequestParam(value = "filter[submission.submission_date_to]", required = false) OffsetDateTime filterSubmissionSubmissionDateTo);


    @ApiOperation(value = "Get Specific Account Request", nickname = "getAccountRequestsID", notes = "", response = AccountRequestResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Account Request", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Account Request Details", response = AccountRequestResponse.class),
        @ApiResponse(code = 400, message = "Account Request creation error", response = ApiError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 404, message = "Not Found", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ApiError.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = ApiError.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = ApiError.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = ApiError.class) })
    @RequestMapping(value = "/organisation/accountrequests/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AccountRequestResponse> getAccountRequestsID(@ApiParam(value = "Account Request ID",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "", nickname = "getAccountRequestsIDSubmissionsSubmissionID", notes = "", response = AccountRequestSubmissionResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Account Request", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Account Request Submission details", response = AccountRequestSubmissionResponse.class),
        @ApiResponse(code = 400, message = "Account Request creation error", response = ApiError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 404, message = "Not Found", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ApiError.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = ApiError.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = ApiError.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = ApiError.class) })
    @RequestMapping(value = "/organisation/accountrequests/{id}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AccountRequestSubmissionResponse> getAccountRequestsIDSubmissionsSubmissionID(@ApiParam(value = "Account Request ID",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Account Request Submission ID",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "List Account Identifications by Account", nickname = "organisationAccountsAccountIdIdentificationsGet", notes = "", response = AccountIdentificationListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "AccountIdentification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of account identification", response = AccountIdentificationListResponse.class) })
    @RequestMapping(value = "/organisation/accounts/{account_id}/identifications",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AccountIdentificationListResponse> organisationAccountsAccountIdIdentificationsGet(@ApiParam(value = "Account Id to which this identification relates to",required=true) @PathVariable("account_id") UUID accountId,@ApiParam(value = "Which page to select") @Valid @RequestParam(value = "page[number]", required = false) String pageNumber,@Min(0) @Max(1000) @ApiParam(value = "Number of items to select") @Valid @RequestParam(value = "page[size]", required = false) Integer pageSize,@ApiParam(value = "Filter by organisation id") @Valid @RequestParam(value = "filter[organisation_id]", required = false) List<UUID> filterOrganisationId,@ApiParam(value = "Filter to only include account identifications with specified secondary_identification") @Valid @RequestParam(value = "filter[secondary_identification]", required = false) List<String> filterSecondaryIdentification);


    @ApiOperation(value = "Delete account identification", nickname = "organisationAccountsAccountIdIdentificationsIdentificationIdDelete", notes = "", authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "AccountIdentification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Account Identification deleted"),
        @ApiResponse(code = 404, message = "Account Identification not found") })
    @RequestMapping(value = "/organisation/accounts/{account_id}/identifications/{identification_id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> organisationAccountsAccountIdIdentificationsIdentificationIdDelete(@ApiParam(value = "Account Id",required=true) @PathVariable("account_id") UUID accountId,@ApiParam(value = "Account Identification Id",required=true) @PathVariable("identification_id") UUID identificationId,@NotNull @Min(0)@ApiParam(value = "Version", required = true) @Valid @RequestParam(value = "version", required = true) Integer version);


    @ApiOperation(value = "Get an account identification by id", nickname = "organisationAccountsAccountIdIdentificationsIdentificationIdGet", notes = "", response = AccountIdentificationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "AccountIdentification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Account Identification response", response = AccountIdentificationResponse.class) })
    @RequestMapping(value = "/organisation/accounts/{account_id}/identifications/{identification_id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AccountIdentificationResponse> organisationAccountsAccountIdIdentificationsIdentificationIdGet(@ApiParam(value = "Account Id",required=true) @PathVariable("account_id") UUID accountId,@ApiParam(value = "Account Identification Id",required=true) @PathVariable("identification_id") UUID identificationId);


    @ApiOperation(value = "Amend Account Identification", nickname = "organisationAccountsAccountIdIdentificationsIdentificationIdPatch", notes = "", response = AccountIdentificationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "AccountIdentification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Account Identification updated", response = AccountIdentificationResponse.class),
        @ApiResponse(code = 409, message = "Account Identification update error, constraint violation of secondary identification", response = ApiError.class) })
    @RequestMapping(value = "/organisation/accounts/{account_id}/identifications/{identification_id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<AccountIdentificationResponse> organisationAccountsAccountIdIdentificationsIdentificationIdPatch(@ApiParam(value = "Account Id",required=true) @PathVariable("account_id") UUID accountId,@ApiParam(value = "Account Identification Id; Must match id in the payload",required=true) @PathVariable("identification_id") UUID identificationId,@ApiParam(value = ""  )  @Valid @RequestBody AccountIdentificationRequest accountIdentificationAmendRequest);


    @ApiOperation(value = "Create an identification for an existing Account", nickname = "organisationAccountsAccountIdIdentificationsPost", notes = "", response = AccountIdentificationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "AccountIdentification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Account Identification creation response", response = AccountIdentificationResponse.class),
        @ApiResponse(code = 409, message = "Account Identification creation error, constraint violation of secondary identification", response = ApiError.class) })
    @RequestMapping(value = "/organisation/accounts/{account_id}/identifications",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AccountIdentificationResponse> organisationAccountsAccountIdIdentificationsPost(@ApiParam(value = "Account Id to which this identification relates to",required=true) @PathVariable("account_id") UUID accountId,@ApiParam(value = ""  )  @Valid @RequestBody AccountIdentificationRequest accountIdentificationCreationRequest);


    @ApiOperation(value = "List accounts", nickname = "organisationAccountsGet", notes = "", response = AccountDetailsListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of account details", response = AccountDetailsListResponse.class) })
    @RequestMapping(value = "/organisation/accounts",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AccountDetailsListResponse> organisationAccountsGet(@ApiParam(value = "Which page to select") @Valid @RequestParam(value = "page[number]", required = false) String pageNumber,@Min(0) @Max(1000) @ApiParam(value = "Number of items to select") @Valid @RequestParam(value = "page[size]", required = false) Integer pageSize,@ApiParam(value = "Filter by organisation id") @Valid @RequestParam(value = "filter[organisation_id]", required = false) List<UUID> filterOrganisationId,@ApiParam(value = "Filter by type of bank id e.g. \"GBDSC\"") @Valid @RequestParam(value = "filter[bank_id_code]", required = false) List<String> filterBankIdCode,@ApiParam(value = "Filter by bank id e.g. sort code or bic") @Valid @RequestParam(value = "filter[bank_id]", required = false) List<String> filterBankId,@ApiParam(value = "Filter by account number") @Valid @RequestParam(value = "filter[account_number]", required = false) List<String> filterAccountNumber,@ApiParam(value = "Filter by country e.g. FR,GB") @Valid @RequestParam(value = "filter[country]", required = false) List<String> filterCountry,@ApiParam(value = "Filter by customer_id") @Valid @RequestParam(value = "filter[customer_id]", required = false) List<String> filterCustomerId,@ApiParam(value = "Filter by IBAN") @Valid @RequestParam(value = "filter[iban]", required = false) List<String> filterIban);


    @ApiOperation(value = "Delete account", nickname = "organisationAccountsIdDelete", notes = "", authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Account deleted") })
    @RequestMapping(value = "/organisation/accounts/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> organisationAccountsIdDelete(@ApiParam(value = "Account Id",required=true) @PathVariable("id") UUID id,@NotNull @Min(0)@ApiParam(value = "Version", required = true) @Valid @RequestParam(value = "version", required = true) Integer version);


    @ApiOperation(value = "Fetch account events", nickname = "organisationAccountsIdEventsGet", notes = "", response = AccountEventListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Account event list", response = AccountEventListResponse.class) })
    @RequestMapping(value = "/organisation/accounts/{id}/events",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AccountEventListResponse> organisationAccountsIdEventsGet(@ApiParam(value = "Account Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Which page to select") @Valid @RequestParam(value = "page[number]", required = false) String pageNumber,@Min(0) @Max(1000) @ApiParam(value = "Number of items to select") @Valid @RequestParam(value = "page[size]", required = false) Integer pageSize);


    @ApiOperation(value = "Fetch account", nickname = "organisationAccountsIdGet", notes = "", response = AccountDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Account details", response = AccountDetailsResponse.class) })
    @RequestMapping(value = "/organisation/accounts/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AccountDetailsResponse> organisationAccountsIdGet(@ApiParam(value = "Account Id",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "Amend account", nickname = "organisationAccountsIdPatch", notes = "", response = AccountDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Account updated", response = AccountDetailsResponse.class) })
    @RequestMapping(value = "/organisation/accounts/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<AccountDetailsResponse> organisationAccountsIdPatch(@ApiParam(value = "Account Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody AccountAmendment accountAmendRequest);


    @ApiOperation(value = "Create account", nickname = "organisationAccountsPost", notes = "", response = AccountCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Account creation response", response = AccountCreationResponse.class) })
    @RequestMapping(value = "/organisation/accounts",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AccountCreationResponse> organisationAccountsPost(@ApiParam(value = ""  )  @Valid @RequestBody AccountCreation accountCreationRequest);


    @ApiOperation(value = "List Positions", nickname = "organisationPositionsGet", notes = "", response = PositionDetailsListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of position details", response = PositionDetailsListResponse.class) })
    @RequestMapping(value = "/organisation/positions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<PositionDetailsListResponse> organisationPositionsGet();


    @ApiOperation(value = "List all organisations", nickname = "organisationUnitsGet", notes = "", response = OrganisationDetailsListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Organisations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of organisation details", response = OrganisationDetailsListResponse.class) })
    @RequestMapping(value = "/organisation/units",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<OrganisationDetailsListResponse> organisationUnitsGet(@ApiParam(value = "Child org id") @Valid @RequestParam(value = "filter[child_organisation_id]", required = false) UUID filterChildOrganisationId,@ApiParam(value = "Organisation ids") @Valid @RequestParam(value = "filter[organisation_ids]", required = false) List<UUID> filterOrganisationIds);


    @ApiOperation(value = "Fetch organisation", nickname = "organisationUnitsIdGet", notes = "", response = OrganisationDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Organisations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Organisation details", response = OrganisationDetailsResponse.class) })
    @RequestMapping(value = "/organisation/units/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<OrganisationDetailsResponse> organisationUnitsIdGet(@ApiParam(value = "Organisation Id",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "Update organisation", nickname = "organisationUnitsIdPatch", notes = "", response = OrganisationDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Organisations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Organisation details", response = OrganisationDetailsResponse.class) })
    @RequestMapping(value = "/organisation/units/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<OrganisationDetailsResponse> organisationUnitsIdPatch(@ApiParam(value = "Organisation Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody OrganisationUpdate organisationUpdateRequest);


    @ApiOperation(value = "Create organisation", nickname = "organisationUnitsPost", notes = "", response = OrganisationCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Organisations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Organisation creation response", response = OrganisationCreationResponse.class) })
    @RequestMapping(value = "/organisation/units",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<OrganisationCreationResponse> organisationUnitsPost(@ApiParam(value = ""  )  @Valid @RequestBody OrganisationCreation organisationCreationRequest);


    @ApiOperation(value = "Create an Account Amendment", nickname = "postAccountAmendments", notes = "", response = AccountAmendmentResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Account Amendment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Account Amendment creation response", response = AccountAmendmentResponse.class),
        @ApiResponse(code = 400, message = "Account Request creation error", response = ApiError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 409, message = "Conflict", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ApiError.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = ApiError.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = ApiError.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = ApiError.class) })
    @RequestMapping(value = "/organisation/accountamendments",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AccountAmendmentResponse> postAccountAmendments(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AccountAmendmentCreation accountAmendmentCreationBody);


    @ApiOperation(value = "", nickname = "postAccountAmendmentsIDSubmissions", notes = "", response = AccountAmendmentSubmissionResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Account Amendment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Account Amendment creation response", response = AccountAmendmentSubmissionResponse.class),
        @ApiResponse(code = 400, message = "Account Request creation error", response = ApiError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 404, message = "Not Found", response = ApiError.class),
        @ApiResponse(code = 409, message = "Conflict", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ApiError.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = ApiError.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = ApiError.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = ApiError.class) })
    @RequestMapping(value = "/organisation/accountamendments/{id}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AccountAmendmentSubmissionResponse> postAccountAmendmentsIDSubmissions(@ApiParam(value = "Account Amendment ID",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody AccountAmendmentSubmissionCreation accountAmendmentSubmissionRequest);


    @ApiOperation(value = "Create an Account Request", nickname = "postAccountRequests", notes = "", response = AccountRequestResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Account Request", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Account Request creation response", response = AccountRequestResponse.class),
        @ApiResponse(code = 400, message = "Account Request creation error", response = ApiError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 409, message = "Conflict", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ApiError.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = ApiError.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = ApiError.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = ApiError.class) })
    @RequestMapping(value = "/organisation/accountrequests",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AccountRequestResponse> postAccountRequests(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AccountRequestCreation accountRequestCreationBody);


    @ApiOperation(value = "", nickname = "postAccountRequestsIDSubmissions", notes = "", response = AccountRequestSubmissionResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Account Request", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Account Request creation response", response = AccountRequestSubmissionResponse.class),
        @ApiResponse(code = 400, message = "Account Request creation error", response = ApiError.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ApiError.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiError.class),
        @ApiResponse(code = 404, message = "Not Found", response = ApiError.class),
        @ApiResponse(code = 409, message = "Conflict", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ApiError.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = ApiError.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = ApiError.class),
        @ApiResponse(code = 504, message = "Gateway timeout", response = ApiError.class) })
    @RequestMapping(value = "/organisation/accountrequests/{id}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AccountRequestSubmissionResponse> postAccountRequestsIDSubmissions(@ApiParam(value = "Account Request ID",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody AccountRequestSubmissionCreation accountRequestSubmissionRequest);

}
