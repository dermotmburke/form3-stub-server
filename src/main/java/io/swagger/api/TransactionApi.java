/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AdviceCreation;
import io.swagger.model.AdviceCreationResponse;
import io.swagger.model.AdviceDetailsResponse;
import io.swagger.model.AdviceSubmissionCreation;
import io.swagger.model.AdviceSubmissionCreationResponse;
import io.swagger.model.AdviceSubmissionDetailsResponse;
import io.swagger.model.ApiError;
import io.swagger.model.ClaimCreation;
import io.swagger.model.ClaimDetailsListResponse;
import io.swagger.model.ClaimDetailsResponse;
import io.swagger.model.ClaimReversalCreation;
import io.swagger.model.ClaimReversalDetailsResponse;
import io.swagger.model.ClaimReversalSubmissionCreation;
import io.swagger.model.ClaimReversalSubmissionDetailsResponse;
import io.swagger.model.ClaimSubmissionCreation;
import io.swagger.model.ClaimSubmissionDetailsResponse;
import io.swagger.model.DirectDebitAdmissionDetailsResponse;
import io.swagger.model.DirectDebitCreation;
import io.swagger.model.DirectDebitCreationResponse;
import io.swagger.model.DirectDebitDecisionAdmissionCreation;
import io.swagger.model.DirectDebitDecisionAdmissionCreationResponse;
import io.swagger.model.DirectDebitDecisionAdmissionDetailsResponse;
import io.swagger.model.DirectDebitDecisionCreation;
import io.swagger.model.DirectDebitDecisionCreationResponse;
import io.swagger.model.DirectDebitDecisionDetailsResponse;
import io.swagger.model.DirectDebitDecisionSubmissionCreation;
import io.swagger.model.DirectDebitDecisionSubmissionCreationResponse;
import io.swagger.model.DirectDebitDecisionSubmissionDetailsResponse;
import io.swagger.model.DirectDebitDetailsListResponse;
import io.swagger.model.DirectDebitDetailsResponse;
import io.swagger.model.DirectDebitRecallAdmissionDetailsResponse;
import io.swagger.model.DirectDebitRecallCreation;
import io.swagger.model.DirectDebitRecallCreationResponse;
import io.swagger.model.DirectDebitRecallDetailsResponse;
import io.swagger.model.DirectDebitRecallSubmissionDetailsResponse;
import io.swagger.model.DirectDebitReturnAdmissionDetailsResponse;
import io.swagger.model.DirectDebitReturnCreation;
import io.swagger.model.DirectDebitReturnCreationResponse;
import io.swagger.model.DirectDebitReturnDetailsResponse;
import io.swagger.model.DirectDebitReturnReversalAdmissionDetailsResponse;
import io.swagger.model.DirectDebitReturnReversalDetailsResponse;
import io.swagger.model.DirectDebitReturnSubmissionCreation;
import io.swagger.model.DirectDebitReturnSubmissionCreationResponse;
import io.swagger.model.DirectDebitReturnSubmissionDetailsResponse;
import io.swagger.model.DirectDebitReversalAdmissionDetailsResponse;
import io.swagger.model.DirectDebitReversalCreation;
import io.swagger.model.DirectDebitReversalCreationResponse;
import io.swagger.model.DirectDebitReversalDetailsResponse;
import io.swagger.model.DirectDebitReversalSubmissionCreation;
import io.swagger.model.DirectDebitReversalSubmissionCreationResponse;
import io.swagger.model.DirectDebitReversalSubmissionDetailsResponse;
import io.swagger.model.DirectDebitSubmissionCreation;
import io.swagger.model.DirectDebitSubmissionCreationResponse;
import io.swagger.model.DirectDebitSubmissionDetailsResponse;
import org.threeten.bp.LocalDate;
import io.swagger.model.MandateAdmissionDetailsResponse;
import io.swagger.model.MandateAmendment;
import io.swagger.model.MandateCreation;
import io.swagger.model.MandateCreationResponse;
import io.swagger.model.MandateDetailsListResponse;
import io.swagger.model.MandateDetailsResponse;
import io.swagger.model.MandateReturnCreation;
import io.swagger.model.MandateReturnCreationResponse;
import io.swagger.model.MandateReturnDetailsResponse;
import io.swagger.model.MandateReturnSubmissionCreation;
import io.swagger.model.MandateReturnSubmissionCreationResponse;
import io.swagger.model.MandateReturnSubmissionDetailsResponse;
import io.swagger.model.MandateSubmissionCreation;
import io.swagger.model.MandateSubmissionDetailsResponse;
import org.threeten.bp.OffsetDateTime;
import io.swagger.model.PaymentAdmissionDetailsResponse;
import io.swagger.model.PaymentAdmissionTaskAmendment;
import io.swagger.model.PaymentAdmissionTaskDetailsResponse;
import io.swagger.model.PaymentAdmissionTaskListResponse;
import io.swagger.model.PaymentCreation;
import io.swagger.model.PaymentCreationResponse;
import io.swagger.model.PaymentDetailsListResponse;
import io.swagger.model.PaymentDetailsResponse;
import io.swagger.model.PaymentSubmissionCreation;
import io.swagger.model.PaymentSubmissionCreationResponse;
import io.swagger.model.PaymentSubmissionDetailsResponse;
import io.swagger.model.QueryAdmissionResponse;
import io.swagger.model.QueryCreation;
import io.swagger.model.QueryFetchResponse;
import io.swagger.model.QueryListResponse;
import io.swagger.model.QueryResponseAdmissionResponse;
import io.swagger.model.QueryResponseCreation;
import io.swagger.model.QueryResponseResponse;
import io.swagger.model.QueryResponseSubmissionCreation;
import io.swagger.model.QueryResponseSubmissionResponse;
import io.swagger.model.QuerySubmissionCreation;
import io.swagger.model.QuerySubmissionResponse;
import io.swagger.model.RecallAdmissionDetailsResponse;
import io.swagger.model.RecallCreation;
import io.swagger.model.RecallCreationResponse;
import io.swagger.model.RecallDecisionAdmissionDetailsResponse;
import io.swagger.model.RecallDecisionCreation;
import io.swagger.model.RecallDecisionCreationResponse;
import io.swagger.model.RecallDecisionDetailsResponse;
import io.swagger.model.RecallDecisionSubmissionCreation;
import io.swagger.model.RecallDecisionSubmissionCreationResponse;
import io.swagger.model.RecallDecisionSubmissionDetailsResponse;
import io.swagger.model.RecallDetailsResponse;
import io.swagger.model.RecallReversalAdmissionDetailsResponse;
import io.swagger.model.RecallReversalDetailsResponse;
import io.swagger.model.RecallSubmissionCreation;
import io.swagger.model.RecallSubmissionCreationResponse;
import io.swagger.model.RecallSubmissionDetailsResponse;
import io.swagger.model.ReturnAdmissionDetailsResponse;
import io.swagger.model.ReturnCreation;
import io.swagger.model.ReturnCreationResponse;
import io.swagger.model.ReturnDetailsResponse;
import io.swagger.model.ReturnReversalAdmissionDetailsResponse;
import io.swagger.model.ReturnReversalCreation;
import io.swagger.model.ReturnReversalCreationResponse;
import io.swagger.model.ReturnReversalDetailsResponse;
import io.swagger.model.ReturnSubmissionCreation;
import io.swagger.model.ReturnSubmissionCreationResponse;
import io.swagger.model.ReturnSubmissionDetailsResponse;
import io.swagger.model.ReversalAdmissionDetailsResponse;
import io.swagger.model.ReversalCreation;
import io.swagger.model.ReversalCreationResponse;
import io.swagger.model.ReversalDetailsResponse;
import io.swagger.model.ReversalSubmissionCreation;
import io.swagger.model.ReversalSubmissionCreationResponse;
import io.swagger.model.ReversalSubmissionDetailsResponse;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-06-29T11:48:32.556Z")

@Validated
@Api(value = "transaction", description = "the transaction API")
@RequestMapping(value = "/v1")
public interface TransactionApi {

    @ApiOperation(value = "List claims", nickname = "transactionClaimsGet", notes = "", response = ClaimDetailsListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Claims", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of claims details", response = ClaimDetailsListResponse.class) })
    @RequestMapping(value = "/transaction/claims",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ClaimDetailsListResponse> transactionClaimsGet(@Pattern(regexp="$[A-z0-9]{4}^") @DecimalMin("0")@ApiParam(value = "Which page to select") @Valid @RequestParam(value = "page[number]", required = false) String pageNumber,@Min(0) @Max(1000) @ApiParam(value = "Number of items to select") @Valid @RequestParam(value = "page[size]", required = false) Integer pageSize,@ApiParam(value = "Filter by organisation id") @Valid @RequestParam(value = "filter[organisation_id]", required = false) List<UUID> filterOrganisationId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[payment_scheme]", required = false) String filterPaymentScheme,@ApiParam(value = "") @Valid @RequestParam(value = "filter[clearing_id]", required = false) String filterClearingId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[reference]", required = false) String filterReference,@ApiParam(value = "") @Valid @RequestParam(value = "filter[reason_code]", required = false) String filterReasonCode,@ApiParam(value = "") @Valid @RequestParam(value = "filter[contact_name]", required = false) String filterContactName,@ApiParam(value = "") @Valid @RequestParam(value = "filter[debtor_party.account_number]", required = false) String filterDebtorPartyAccountNumber,@ApiParam(value = "") @Valid @RequestParam(value = "filter[debtor_party.bank_id]", required = false) String filterDebtorPartyBankId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[beneficiary_party.account_number]", required = false) String filterBeneficiaryPartyAccountNumber,@ApiParam(value = "") @Valid @RequestParam(value = "filter[beneficiary_party.bank_id]", required = false) String filterBeneficiaryPartyBankId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[original_instruction.reference]", required = false) String filterOriginalInstructionReference,@ApiParam(value = "") @Valid @RequestParam(value = "filter[submission.status]", required = false) String filterSubmissionStatus,@ApiParam(value = "") @Valid @RequestParam(value = "filter[submission.submission_date_from]", required = false) OffsetDateTime filterSubmissionSubmissionDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[submission.submission_date_to]", required = false) OffsetDateTime filterSubmissionSubmissionDateTo,@ApiParam(value = "") @Valid @RequestParam(value = "filter[reversal.status]", required = false) String filterReversalStatus,@ApiParam(value = "") @Valid @RequestParam(value = "filter[reversal.submission_date_from]", required = false) OffsetDateTime filterReversalSubmissionDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[reversal.submission_date_to]", required = false) OffsetDateTime filterReversalSubmissionDateTo);


    @ApiOperation(value = "Fetch claim", nickname = "transactionClaimsIdGet", notes = "", response = ClaimDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Claims", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Claim details", response = ClaimDetailsResponse.class) })
    @RequestMapping(value = "/transaction/claims/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ClaimDetailsResponse> transactionClaimsIdGet(@ApiParam(value = "Claim Id",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "Create Claim Reversal", nickname = "transactionClaimsIdReversalsPost", notes = "", response = ClaimReversalDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Claims", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Claim Reversal creation response", response = ClaimReversalDetailsResponse.class),
        @ApiResponse(code = 400, message = "Claim Reversal creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/claims/{id}/reversals",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ClaimReversalDetailsResponse> transactionClaimsIdReversalsPost(@ApiParam(value = "Claim Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody ClaimReversalCreation claimReversalCreationRequest);


    @ApiOperation(value = "Fetch Claim Reversal", nickname = "transactionClaimsIdReversalsReversalIdGet", notes = "", response = ClaimReversalDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Claims", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Claim Reversal details", response = ClaimReversalDetailsResponse.class),
        @ApiResponse(code = 400, message = "Error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/claims/{id}/reversals/{reversalId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ClaimReversalDetailsResponse> transactionClaimsIdReversalsReversalIdGet(@ApiParam(value = "Claim Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Claim Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId);


    @ApiOperation(value = "Create Claim Reversal Submission", nickname = "transactionClaimsIdReversalsReversalIdSubmissionsPost", notes = "", response = ClaimReversalSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Claims", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Claim Reversal Submission creation response", response = ClaimReversalSubmissionDetailsResponse.class),
        @ApiResponse(code = 400, message = "Claim Reversal creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/claims/{id}/reversals/{reversalId}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ClaimReversalSubmissionDetailsResponse> transactionClaimsIdReversalsReversalIdSubmissionsPost(@ApiParam(value = "Claim Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Claim Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId,@ApiParam(value = ""  )  @Valid @RequestBody ClaimReversalSubmissionCreation claimReversalSubmissionCreationRequest);


    @ApiOperation(value = "Fetch Claim Reversal Submission", nickname = "transactionClaimsIdReversalsReversalIdSubmissionsSubmissionIdGet", notes = "", response = ClaimReversalSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Claims", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Claim Reversal Submission details", response = ClaimReversalSubmissionDetailsResponse.class),
        @ApiResponse(code = 400, message = "Error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/claims/{id}/reversals/{reversalId}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ClaimReversalSubmissionDetailsResponse> transactionClaimsIdReversalsReversalIdSubmissionsSubmissionIdGet(@ApiParam(value = "Claim Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Claim Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId,@ApiParam(value = "Claim Reversal Submission Id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create Claim Submission", nickname = "transactionClaimsIdSubmissionsPost", notes = "", response = ClaimSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Claims", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Claim Submission creation response", response = ClaimSubmissionDetailsResponse.class),
        @ApiResponse(code = 400, message = "Claim Submission creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/claims/{id}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ClaimSubmissionDetailsResponse> transactionClaimsIdSubmissionsPost(@ApiParam(value = "Claim Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody ClaimSubmissionCreation claimSubmissionCreationRequest);


    @ApiOperation(value = "Fetch Claim Submission", nickname = "transactionClaimsIdSubmissionsSubmissionIdGet", notes = "", response = ClaimSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Claims", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Claim Submission details", response = ClaimSubmissionDetailsResponse.class),
        @ApiResponse(code = 400, message = "Error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/claims/{id}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ClaimSubmissionDetailsResponse> transactionClaimsIdSubmissionsSubmissionIdGet(@ApiParam(value = "Claim Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Claim Submission Id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create Claim", nickname = "transactionClaimsPost", notes = "", response = ClaimDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Claims", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Claim creation response", response = ClaimDetailsResponse.class),
        @ApiResponse(code = 400, message = "Claim creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/claims",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ClaimDetailsResponse> transactionClaimsPost(@ApiParam(value = ""  )  @Valid @RequestBody ClaimCreation claimCreationRequest);


    @ApiOperation(value = "List direct debits", nickname = "transactionDirectdebitsGet", notes = "", response = DirectDebitDetailsListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of direct debit details", response = DirectDebitDetailsListResponse.class) })
    @RequestMapping(value = "/transaction/directdebits",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitDetailsListResponse> transactionDirectdebitsGet(@Pattern(regexp="$[A-z0-9]{4}^") @DecimalMin("0")@ApiParam(value = "Which page to select") @Valid @RequestParam(value = "page[number]", required = false) String pageNumber,@Min(0) @Max(1000) @ApiParam(value = "Number of items to select") @Valid @RequestParam(value = "page[size]", required = false) Integer pageSize,@ApiParam(value = "Filter by organisation id") @Valid @RequestParam(value = "filter[organisation_id]", required = false) List<UUID> filterOrganisationId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[created_date_from]", required = false) OffsetDateTime filterCreatedDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[created_date_to]", required = false) OffsetDateTime filterCreatedDateTo,@ApiParam(value = "") @Valid @RequestParam(value = "filter[modified_date_from]", required = false) OffsetDateTime filterModifiedDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[modified_date_to]", required = false) OffsetDateTime filterModifiedDateTo,@ApiParam(value = "") @Valid @RequestParam(value = "filter[debtor_party.account_number]", required = false) String filterDebtorPartyAccountNumber,@ApiParam(value = "") @Valid @RequestParam(value = "filter[debtor_party.bank_id]", required = false) String filterDebtorPartyBankId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[beneficiary_party.account_number]", required = false) String filterBeneficiaryPartyAccountNumber,@ApiParam(value = "") @Valid @RequestParam(value = "filter[beneficiary_party.bank_id]", required = false) String filterBeneficiaryPartyBankId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[currency]", required = false) String filterCurrency,@ApiParam(value = "") @Valid @RequestParam(value = "filter[payment_scheme]", required = false) String filterPaymentScheme,@ApiParam(value = "") @Valid @RequestParam(value = "filter[payment_type]", required = false) String filterPaymentType,@ApiParam(value = "") @Valid @RequestParam(value = "filter[processing_date_from]", required = false) LocalDate filterProcessingDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[processing_date_to]", required = false) LocalDate filterProcessingDateTo,@ApiParam(value = "") @Valid @RequestParam(value = "filter[clearing_id]", required = false) String filterClearingId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[admission.admission_date_from]", required = false) OffsetDateTime filterAdmissionAdmissionDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[admission.admission_date_to]", required = false) OffsetDateTime filterAdmissionAdmissionDateTo,@ApiParam(value = "Filter by admission status") @Valid @RequestParam(value = "filter[admission.status]", required = false) String filterAdmissionStatus,@ApiParam(value = "Filter by admission scheme status code") @Valid @RequestParam(value = "filter[admission.scheme_status_code]", required = false) String filterAdmissionSchemeStatusCode,@ApiParam(value = "Filter by amount") @Valid @RequestParam(value = "filter[amount]", required = false) String filterAmount,@ApiParam(value = "Filter by reference") @Valid @RequestParam(value = "filter[reference]", required = false) String filterReference,@ApiParam(value = "Filter by unique scheme id") @Valid @RequestParam(value = "filter[unique_scheme_id]", required = false) String filterUniqueSchemeId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[submission.submission_date_from]", required = false) OffsetDateTime filterSubmissionSubmissionDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[submission.submission_date_to]", required = false) OffsetDateTime filterSubmissionSubmissionDateTo,@ApiParam(value = "Filter by submission status") @Valid @RequestParam(value = "filter[submission.status]", required = false) String filterSubmissionStatus,@ApiParam(value = "Filter by submission scheme status code") @Valid @RequestParam(value = "filter[submission.scheme_status_code]", required = false) String filterSubmissionSchemeStatusCode);


    @ApiOperation(value = "Fetch Direct Debit Admission", nickname = "transactionDirectdebitsIdAdmissionsAdmissionIdGet", notes = "", response = DirectDebitAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Direct Debit Admission details", response = DirectDebitAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitAdmissionDetailsResponse> transactionDirectdebitsIdAdmissionsAdmissionIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Direct Debit Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Fetch decision admission", nickname = "transactionDirectdebitsIdDecisionsDecisionIdAdmissionsAdmissionIdGet", notes = "", response = DirectDebitDecisionAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Decision admission details", response = DirectDebitDecisionAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/decisions/{decisionId}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitDecisionAdmissionDetailsResponse> transactionDirectdebitsIdDecisionsDecisionIdAdmissionsAdmissionIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Direct Debit decision id",required=true) @PathVariable("decisionId") UUID decisionId,@ApiParam(value = "Direct Debit Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Create direct debit decision admissions", nickname = "transactionDirectdebitsIdDecisionsDecisionIdAdmissionsPost", notes = "", response = DirectDebitDecisionAdmissionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Direct Debit decision admission creation response", response = DirectDebitDecisionAdmissionCreationResponse.class),
        @ApiResponse(code = 400, message = "Direct Debit decision admission creation error", response = ApiError.class),
        @ApiResponse(code = 409, message = "Direct Debit decision submission creation conflict error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/decisions/{decisionId}/admissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirectDebitDecisionAdmissionCreationResponse> transactionDirectdebitsIdDecisionsDecisionIdAdmissionsPost(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Direct Debit decision id",required=true) @PathVariable("decisionId") UUID decisionId,@ApiParam(value = ""  )  @Valid @RequestBody DirectDebitDecisionAdmissionCreation directDebitAdmissionSubmissionCreationRequest);


    @ApiOperation(value = "Get direct debit decision", nickname = "transactionDirectdebitsIdDecisionsDecisionIdGet", notes = "", response = DirectDebitDecisionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Direct debit decision details", response = DirectDebitDecisionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/decisions/{decisionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitDecisionDetailsResponse> transactionDirectdebitsIdDecisionsDecisionIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Direct Debit decision id",required=true) @PathVariable("decisionId") UUID decisionId);


    @ApiOperation(value = "Create direct debit decision submission", nickname = "transactionDirectdebitsIdDecisionsDecisionIdSubmissionsPost", notes = "", response = DirectDebitDecisionSubmissionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Direct Debit decision submission creation response", response = DirectDebitDecisionSubmissionCreationResponse.class),
        @ApiResponse(code = 400, message = "Direct Debit decision submission creation error", response = ApiError.class),
        @ApiResponse(code = 409, message = "Direct Debit decision submission creation conflict error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/decisions/{decisionId}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirectDebitDecisionSubmissionCreationResponse> transactionDirectdebitsIdDecisionsDecisionIdSubmissionsPost(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Direct Debit decision id",required=true) @PathVariable("decisionId") UUID decisionId,@ApiParam(value = ""  )  @Valid @RequestBody DirectDebitDecisionSubmissionCreation directDebitDecisionSubmissionCreationRequest);


    @ApiOperation(value = "Get direct debit decision submission", nickname = "transactionDirectdebitsIdDecisionsDecisionIdSubmissionsSubmissionIdGet", notes = "", response = DirectDebitDecisionSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Direct debit decision details", response = DirectDebitDecisionSubmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/decisions/{decisionId}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitDecisionSubmissionDetailsResponse> transactionDirectdebitsIdDecisionsDecisionIdSubmissionsSubmissionIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Direct Debit decision id",required=true) @PathVariable("decisionId") UUID decisionId,@ApiParam(value = "Direct Debit decision submission id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create direct debit decision", nickname = "transactionDirectdebitsIdDecisionsPost", notes = "", response = DirectDebitDecisionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Direct Debit decision creation response", response = DirectDebitDecisionCreationResponse.class),
        @ApiResponse(code = 400, message = "Direct Debit decision creation error", response = ApiError.class),
        @ApiResponse(code = 409, message = "Direct Debit decision creation conflict error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/decisions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirectDebitDecisionCreationResponse> transactionDirectdebitsIdDecisionsPost(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody DirectDebitDecisionCreation directDebitDecisionCreationRequest);


    @ApiOperation(value = "Fetch direct debit", nickname = "transactionDirectdebitsIdGet", notes = "", response = DirectDebitDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Direct Debit details", response = DirectDebitDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitDetailsResponse> transactionDirectdebitsIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "Create recall", nickname = "transactionDirectdebitsIdRecallsPost", notes = "", response = DirectDebitRecallCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Recall creation response", response = DirectDebitRecallCreationResponse.class),
        @ApiResponse(code = 400, message = "Recall creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/recalls",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirectDebitRecallCreationResponse> transactionDirectdebitsIdRecallsPost(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody DirectDebitRecallCreation recallCreationRequest);


    @ApiOperation(value = "Fetch recall admission", nickname = "transactionDirectdebitsIdRecallsRecallIdAdmissionsAdmissionIdGet", notes = "", response = DirectDebitRecallAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Recall admission details", response = DirectDebitRecallAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/recalls/{recallId}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitRecallAdmissionDetailsResponse> transactionDirectdebitsIdRecallsRecallIdAdmissionsAdmissionIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId,@ApiParam(value = "Direct Debit Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Fetch recall", nickname = "transactionDirectdebitsIdRecallsRecallIdGet", notes = "", response = DirectDebitRecallDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Recall details", response = DirectDebitRecallDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/recalls/{recallId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitRecallDetailsResponse> transactionDirectdebitsIdRecallsRecallIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId);


    @ApiOperation(value = "Fetch recall submission", nickname = "transactionDirectdebitsIdRecallsRecallIdSubmissionsSubmissionIdGet", notes = "", response = DirectDebitRecallSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Recall submission details", response = DirectDebitRecallSubmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/recalls/{recallId}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitRecallSubmissionDetailsResponse> transactionDirectdebitsIdRecallsRecallIdSubmissionsSubmissionIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId,@ApiParam(value = "Direct Debit decision submission id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create direct debit return", nickname = "transactionDirectdebitsIdReturnsPost", notes = "", response = DirectDebitReturnCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Return creation response", response = DirectDebitReturnCreationResponse.class),
        @ApiResponse(code = 400, message = "Return creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/returns",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirectDebitReturnCreationResponse> transactionDirectdebitsIdReturnsPost(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody DirectDebitReturnCreation returnCreationRequest);


    @ApiOperation(value = "Fetch return admission", nickname = "transactionDirectdebitsIdReturnsReturnIdAdmissionsAdmissionIdGet", notes = "", response = DirectDebitReturnAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Reversal admission details", response = DirectDebitReturnAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/returns/{returnId}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitReturnAdmissionDetailsResponse> transactionDirectdebitsIdReturnsReturnIdAdmissionsAdmissionIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId,@ApiParam(value = "Direct Debit Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Fetch direct debit return", nickname = "transactionDirectdebitsIdReturnsReturnIdGet", notes = "", response = DirectDebitReturnDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return details", response = DirectDebitReturnDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/returns/{returnId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitReturnDetailsResponse> transactionDirectdebitsIdReturnsReturnIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId);


    @ApiOperation(value = "Fetch return admission", nickname = "transactionDirectdebitsIdReturnsReturnIdReversalsReversalIdAdmissionsAdmissionIdGet", notes = "", response = DirectDebitReturnReversalAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Reversal admission details", response = DirectDebitReturnReversalAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/returns/{returnId}/reversals/{reversalId}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitReturnReversalAdmissionDetailsResponse> transactionDirectdebitsIdReturnsReturnIdReversalsReversalIdAdmissionsAdmissionIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId,@ApiParam(value = "Direct Debit Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Fetch return admission", nickname = "transactionDirectdebitsIdReturnsReturnIdReversalsReversalIdGet", notes = "", response = DirectDebitReturnReversalDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Reversal reversal details", response = DirectDebitReturnReversalDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/returns/{returnId}/reversals/{reversalId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitReturnReversalDetailsResponse> transactionDirectdebitsIdReturnsReturnIdReversalsReversalIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId);


    @ApiOperation(value = "create direct debit return submission", nickname = "transactionDirectdebitsIdReturnsReturnIdSubmissionsPost", notes = "", response = DirectDebitReturnSubmissionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Return submission creation response", response = DirectDebitReturnSubmissionCreationResponse.class),
        @ApiResponse(code = 400, message = "Return submission creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/returns/{returnId}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirectDebitReturnSubmissionCreationResponse> transactionDirectdebitsIdReturnsReturnIdSubmissionsPost(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId,@ApiParam(value = ""  )  @Valid @RequestBody DirectDebitReturnSubmissionCreation returnSubmissionCreationRequest);


    @ApiOperation(value = "Fetch return submission", nickname = "transactionDirectdebitsIdReturnsReturnIdSubmissionsSubmissionIdGet", notes = "", response = DirectDebitReturnSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return submission details", response = DirectDebitReturnSubmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/returns/{returnId}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitReturnSubmissionDetailsResponse> transactionDirectdebitsIdReturnsReturnIdSubmissionsSubmissionIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId,@ApiParam(value = "Direct Debit decision submission id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create direct debit reversal", nickname = "transactionDirectdebitsIdReversalsPost", notes = "", response = DirectDebitReversalCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Reversal creation response", response = DirectDebitReversalCreationResponse.class),
        @ApiResponse(code = 400, message = "Reversal creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/reversals",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirectDebitReversalCreationResponse> transactionDirectdebitsIdReversalsPost(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody DirectDebitReversalCreation reversalCreationRequest);


    @ApiOperation(value = "Fetch reversal admission", nickname = "transactionDirectdebitsIdReversalsReversalIdAdmissionsAdmissionIdGet", notes = "", response = DirectDebitReversalAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Reversal admission details", response = DirectDebitReversalAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/reversals/{reversalId}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitReversalAdmissionDetailsResponse> transactionDirectdebitsIdReversalsReversalIdAdmissionsAdmissionIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId,@ApiParam(value = "Direct Debit Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Fetch direct debit reversal", nickname = "transactionDirectdebitsIdReversalsReversalIdGet", notes = "", response = DirectDebitReversalDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Reversal details", response = DirectDebitReversalDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/reversals/{reversalId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitReversalDetailsResponse> transactionDirectdebitsIdReversalsReversalIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId);


    @ApiOperation(value = "create reversal submission", nickname = "transactionDirectdebitsIdReversalsReversalIdSubmissionsPost", notes = "", response = DirectDebitReversalSubmissionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Reversal submission creation response", response = DirectDebitReversalSubmissionCreationResponse.class),
        @ApiResponse(code = 400, message = "Reversal submission creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/reversals/{reversalId}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirectDebitReversalSubmissionCreationResponse> transactionDirectdebitsIdReversalsReversalIdSubmissionsPost(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId,@ApiParam(value = ""  )  @Valid @RequestBody DirectDebitReversalSubmissionCreation reversalSubmissionCreationRequest);


    @ApiOperation(value = "Fetch reversal submission", nickname = "transactionDirectdebitsIdReversalsReversalIdSubmissionsSubmissionIdGet", notes = "", response = DirectDebitReversalSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Reversal submission details", response = DirectDebitReversalSubmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/reversals/{reversalId}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitReversalSubmissionDetailsResponse> transactionDirectdebitsIdReversalsReversalIdSubmissionsSubmissionIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId,@ApiParam(value = "Direct Debit decision submission id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create direct debit submission", nickname = "transactionDirectdebitsIdSubmissionsPost", notes = "", response = DirectDebitSubmissionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Direct debit submission creation response", response = DirectDebitSubmissionCreationResponse.class),
        @ApiResponse(code = 400, message = "Return submission creation error", response = ApiError.class),
        @ApiResponse(code = 409, message = "Direct Debit submission conflict error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirectDebitSubmissionCreationResponse> transactionDirectdebitsIdSubmissionsPost(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody DirectDebitSubmissionCreation directDebitSubmissionCreationRequest);


    @ApiOperation(value = "Get direct debit submission", nickname = "transactionDirectdebitsIdSubmissionsSubmissionIdGet", notes = "", response = DirectDebitSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Direct debit submission details", response = DirectDebitSubmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/directdebits/{id}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DirectDebitSubmissionDetailsResponse> transactionDirectdebitsIdSubmissionsSubmissionIdGet(@ApiParam(value = "Direct Debit Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Direct Debit decision submission id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create Direct debit", nickname = "transactionDirectdebitsPost", notes = "", response = DirectDebitCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "DirectDebits", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Direct Debit creation response", response = DirectDebitCreationResponse.class),
        @ApiResponse(code = 400, message = "Direct Debit creation error", response = ApiError.class),
        @ApiResponse(code = 409, message = "Direct Debit creation conflict error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/directdebits",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirectDebitCreationResponse> transactionDirectdebitsPost(@ApiParam(value = ""  )  @Valid @RequestBody DirectDebitCreation directDebitCreationRequest);


    @ApiOperation(value = "List mandates", nickname = "transactionMandatesGet", notes = "", response = MandateDetailsListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Mandates", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of mandates details", response = MandateDetailsListResponse.class) })
    @RequestMapping(value = "/transaction/mandates",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<MandateDetailsListResponse> transactionMandatesGet(@Pattern(regexp="$[A-z0-9]{4}^") @DecimalMin("0")@ApiParam(value = "Which page to select") @Valid @RequestParam(value = "page[number]", required = false) String pageNumber,@Min(0) @Max(1000) @ApiParam(value = "Number of items to select") @Valid @RequestParam(value = "page[size]", required = false) Integer pageSize,@ApiParam(value = "Filter by organisation id") @Valid @RequestParam(value = "filter[organisation_id]", required = false) List<UUID> filterOrganisationId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[debtor_party.account_number]", required = false) String filterDebtorPartyAccountNumber,@ApiParam(value = "") @Valid @RequestParam(value = "filter[debtor_party.bank_id]", required = false) String filterDebtorPartyBankId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[beneficiary_party.account_number]", required = false) String filterBeneficiaryPartyAccountNumber,@ApiParam(value = "") @Valid @RequestParam(value = "filter[beneficiary_party.bank_id]", required = false) String filterBeneficiaryPartyBankId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[currency]", required = false) String filterCurrency,@ApiParam(value = "") @Valid @RequestParam(value = "filter[payment_scheme]", required = false) String filterPaymentScheme,@ApiParam(value = "") @Valid @RequestParam(value = "filter[payment_type]", required = false) String filterPaymentType,@ApiParam(value = "") @Valid @RequestParam(value = "filter[processing_date_from]", required = false) LocalDate filterProcessingDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[processing_date_to]", required = false) LocalDate filterProcessingDateTo,@ApiParam(value = "") @Valid @RequestParam(value = "filter[scheme_processing_date_from]", required = false) LocalDate filterSchemeProcessingDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[scheme_processing_date_to]", required = false) LocalDate filterSchemeProcessingDateTo,@ApiParam(value = "") @Valid @RequestParam(value = "filter[clearing_id]", required = false) String filterClearingId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[admission.admission_date_from]", required = false) OffsetDateTime filterAdmissionAdmissionDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[admission.admission_date_to]", required = false) OffsetDateTime filterAdmissionAdmissionDateTo,@ApiParam(value = "Filter by admission status") @Valid @RequestParam(value = "filter[admission.status]", required = false) String filterAdmissionStatus,@ApiParam(value = "Filter by admission scheme status code") @Valid @RequestParam(value = "filter[admission.scheme_status_code]", required = false) String filterAdmissionSchemeStatusCode,@ApiParam(value = "Filter by amount") @Valid @RequestParam(value = "filter[amount]", required = false) String filterAmount,@ApiParam(value = "Filter by reference") @Valid @RequestParam(value = "filter[reference]", required = false) String filterReference,@ApiParam(value = "Filter by unique scheme id") @Valid @RequestParam(value = "filter[unique_scheme_id]", required = false) String filterUniqueSchemeId,@ApiParam(value = "Include old versions of mandates") @Valid @RequestParam(value = "filter[all_versions]", required = false) Boolean filterAllVersions,@ApiParam(value = "") @Valid @RequestParam(value = "filter[submission.submission_date_from]", required = false) OffsetDateTime filterSubmissionSubmissionDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[submission.submission_date_to]", required = false) OffsetDateTime filterSubmissionSubmissionDateTo,@ApiParam(value = "Filter by mandate status") @Valid @RequestParam(value = "filter[status]", required = false) String filterStatus,@ApiParam(value = "Filter by mandate status reason") @Valid @RequestParam(value = "filter[status_reason]", required = false) String filterStatusReason);


    @ApiOperation(value = "Fetch Mandate Admission", nickname = "transactionMandatesIdAdmissionsAdmissionIdGet", notes = "", response = MandateAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Mandates", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Mandate Admission details", response = MandateAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/mandates/{id}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<MandateAdmissionDetailsResponse> transactionMandatesIdAdmissionsAdmissionIdGet(@ApiParam(value = "Mandate Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Mandate Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Fetch mandate", nickname = "transactionMandatesIdGet", notes = "", response = MandateDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Mandates", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Mandate details", response = MandateDetailsResponse.class) })
    @RequestMapping(value = "/transaction/mandates/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<MandateDetailsResponse> transactionMandatesIdGet(@ApiParam(value = "Mandate Id",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "Update mandate", nickname = "transactionMandatesIdPatch", notes = "", response = MandateDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Mandates", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Mandate details", response = MandateDetailsResponse.class),
        @ApiResponse(code = 400, message = "Mandate update error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/mandates/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<MandateDetailsResponse> transactionMandatesIdPatch(@ApiParam(value = "Mandate Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody MandateAmendment mandateAmendment);


    @ApiOperation(value = "Create mandate return", nickname = "transactionMandatesIdReturnsPost", notes = "", response = MandateReturnCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Mandates", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Return creation response", response = MandateReturnCreationResponse.class),
        @ApiResponse(code = 400, message = "Return creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/mandates/{id}/returns",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<MandateReturnCreationResponse> transactionMandatesIdReturnsPost(@ApiParam(value = "Mandate Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody MandateReturnCreation returnCreationRequest);


    @ApiOperation(value = "Fetch mandate return", nickname = "transactionMandatesIdReturnsReturnIdGet", notes = "", response = MandateReturnDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Mandates", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return details", response = MandateReturnDetailsResponse.class) })
    @RequestMapping(value = "/transaction/mandates/{id}/returns/{returnId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<MandateReturnDetailsResponse> transactionMandatesIdReturnsReturnIdGet(@ApiParam(value = "Mandate Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId);


    @ApiOperation(value = "Create mandate return submission", nickname = "transactionMandatesIdReturnsReturnIdSubmissionsPost", notes = "", response = MandateReturnSubmissionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Mandates", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Return submission creation response", response = MandateReturnSubmissionCreationResponse.class),
        @ApiResponse(code = 400, message = "Return submission creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/mandates/{id}/returns/{returnId}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<MandateReturnSubmissionCreationResponse> transactionMandatesIdReturnsReturnIdSubmissionsPost(@ApiParam(value = "Mandate Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId,@ApiParam(value = ""  )  @Valid @RequestBody MandateReturnSubmissionCreation returnSubmissionCreationRequest);


    @ApiOperation(value = "Fetch return submission", nickname = "transactionMandatesIdReturnsReturnIdSubmissionsSubmissionIdGet", notes = "", response = MandateReturnSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Mandates", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return submission details", response = MandateReturnSubmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/mandates/{id}/returns/{returnId}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<MandateReturnSubmissionDetailsResponse> transactionMandatesIdReturnsReturnIdSubmissionsSubmissionIdGet(@ApiParam(value = "Mandate Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId,@ApiParam(value = "Submission Id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create Mandate Submission", nickname = "transactionMandatesIdSubmissionsPost", notes = "", response = MandateSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Mandates", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Mandate Submission creation response", response = MandateSubmissionDetailsResponse.class),
        @ApiResponse(code = 400, message = "Mandate Submission creation error", response = ApiError.class),
        @ApiResponse(code = 409, message = "Mandate Submission creation conflict error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/mandates/{id}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<MandateSubmissionDetailsResponse> transactionMandatesIdSubmissionsPost(@ApiParam(value = "Mandate Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody MandateSubmissionCreation mandateSubmissionCreationRequest);


    @ApiOperation(value = "Fetch Mandate Submission", nickname = "transactionMandatesIdSubmissionsSubmissionIdGet", notes = "", response = MandateSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Mandates", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Mandate Submission details", response = MandateSubmissionDetailsResponse.class),
        @ApiResponse(code = 400, message = "Error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/mandates/{id}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<MandateSubmissionDetailsResponse> transactionMandatesIdSubmissionsSubmissionIdGet(@ApiParam(value = "Mandate Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Mandate Submission Id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create Mandate", nickname = "transactionMandatesPost", notes = "", response = MandateCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Mandates", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Mandate creation response", response = MandateCreationResponse.class),
        @ApiResponse(code = 400, message = "Mandate creation error", response = ApiError.class),
        @ApiResponse(code = 409, message = "Mandate creation conflict Error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/mandates",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<MandateCreationResponse> transactionMandatesPost(@ApiParam(value = ""  )  @Valid @RequestBody MandateCreation mandateCreationRequest);


    @ApiOperation(value = "List payments", nickname = "transactionPaymentsGet", notes = "", response = PaymentDetailsListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of payment details", response = PaymentDetailsListResponse.class) })
    @RequestMapping(value = "/transaction/payments",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<PaymentDetailsListResponse> transactionPaymentsGet(@Pattern(regexp="$[A-z0-9]{4}^") @DecimalMin("0")@ApiParam(value = "Which page to select") @Valid @RequestParam(value = "page[number]", required = false) String pageNumber,@Min(0) @Max(1000) @ApiParam(value = "Number of items to select") @Valid @RequestParam(value = "page[size]", required = false) Integer pageSize,@ApiParam(value = "Filter by organisation id") @Valid @RequestParam(value = "filter[organisation_id]", required = false) List<UUID> filterOrganisationId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[debtor_party.account_number]", required = false) String filterDebtorPartyAccountNumber,@ApiParam(value = "") @Valid @RequestParam(value = "filter[debtor_party.bank_id]", required = false) String filterDebtorPartyBankId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[beneficiary_party.account_number]", required = false) String filterBeneficiaryPartyAccountNumber,@ApiParam(value = "") @Valid @RequestParam(value = "filter[beneficiary_party.bank_id]", required = false) String filterBeneficiaryPartyBankId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[currency]", required = false) String filterCurrency,@ApiParam(value = "") @Valid @RequestParam(value = "filter[scheme_transaction_id]", required = false) String filterSchemeTransactionId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[payment_scheme]", required = false) String filterPaymentScheme,@ApiParam(value = "") @Valid @RequestParam(value = "filter[payment_type]", required = false) String filterPaymentType,@ApiParam(value = "") @Valid @RequestParam(value = "filter[processing_date_from]", required = false) LocalDate filterProcessingDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[processing_date_to]", required = false) LocalDate filterProcessingDateTo,@ApiParam(value = "") @Valid @RequestParam(value = "filter[unique_scheme_id]", required = false) String filterUniqueSchemeId,@ApiParam(value = "") @Valid @RequestParam(value = "filter[amount]", required = false) String filterAmount,@ApiParam(value = "") @Valid @RequestParam(value = "filter[reference]", required = false) String filterReference,@ApiParam(value = "") @Valid @RequestParam(value = "filter[submission.submission_date_from]", required = false) OffsetDateTime filterSubmissionSubmissionDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[submission.submission_date_to]", required = false) OffsetDateTime filterSubmissionSubmissionDateTo,@ApiParam(value = "Filter by submission status") @Valid @RequestParam(value = "filter[submission.status]", required = false) String filterSubmissionStatus,@ApiParam(value = "Filter by submission scheme status code") @Valid @RequestParam(value = "filter[submission.scheme_status_code]", required = false) String filterSubmissionSchemeStatusCode,@ApiParam(value = "") @Valid @RequestParam(value = "filter[admission.admission_date_from]", required = false) OffsetDateTime filterAdmissionAdmissionDateFrom,@ApiParam(value = "") @Valid @RequestParam(value = "filter[admission.admission_date_to]", required = false) OffsetDateTime filterAdmissionAdmissionDateTo,@ApiParam(value = "Filter by admission status") @Valid @RequestParam(value = "filter[admission.status]", required = false) String filterAdmissionStatus,@ApiParam(value = "Filter by admission scheme status code") @Valid @RequestParam(value = "filter[admission.scheme_status_code]", required = false) String filterAdmissionSchemeStatusCode,@ApiParam(value = "Filter for payments containing all of the requested relationships", allowableValues = "payment_submissions, payment_admissions, reversals, recalls, returns, payment_advices") @Valid @RequestParam(value = "filter[relationships]", required = false) List<String> filterRelationships,@ApiParam(value = "Filter for payments containing none of the requested relationships", allowableValues = "payment_submissions, payment_admissions, reversals, recalls, returns, payment_advices") @Valid @RequestParam(value = "filter[not_relationships]", required = false) List<String> filterNotRelationships);


    @ApiOperation(value = "Fetch admission", nickname = "transactionPaymentsIdAdmissionsAdmissionIdGet", notes = "", response = PaymentAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Admission details", response = PaymentAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<PaymentAdmissionDetailsResponse> transactionPaymentsIdAdmissionsAdmissionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "List tasks", nickname = "transactionPaymentsIdAdmissionsAdmissionIdTasksGet", notes = "", response = PaymentAdmissionTaskListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of Task Details", response = PaymentAdmissionTaskListResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/admissions/{admissionId}/tasks",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<PaymentAdmissionTaskListResponse> transactionPaymentsIdAdmissionsAdmissionIdTasksGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Get Payment Admission Task By ID", nickname = "transactionPaymentsIdAdmissionsAdmissionIdTasksTaskIdGet", notes = "", response = PaymentAdmissionTaskDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Payment Admission Task Details details", response = PaymentAdmissionTaskDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/admissions/{admissionId}/tasks/{taskId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<PaymentAdmissionTaskDetailsResponse> transactionPaymentsIdAdmissionsAdmissionIdTasksTaskIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Admission Id",required=true) @PathVariable("admissionId") UUID admissionId,@ApiParam(value = "Payment Admission Task Id",required=true) @PathVariable("taskId") UUID taskId);


    @ApiOperation(value = "Patch Payment Admission Task", nickname = "transactionPaymentsIdAdmissionsAdmissionIdTasksTaskIdPatch", notes = "", response = PaymentAdmissionTaskDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Payment Admission Task update response", response = PaymentAdmissionTaskDetailsResponse.class),
        @ApiResponse(code = 400, message = "Error", response = ApiError.class),
        @ApiResponse(code = 409, message = "Conflict", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments/{id}/admissions/{admissionId}/tasks/{taskId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<PaymentAdmissionTaskDetailsResponse> transactionPaymentsIdAdmissionsAdmissionIdTasksTaskIdPatch(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Admission Id",required=true) @PathVariable("admissionId") UUID admissionId,@ApiParam(value = "Payment Admission Task Id",required=true) @PathVariable("taskId") UUID taskId,@ApiParam(value = ""  )  @Valid @RequestBody PaymentAdmissionTaskAmendment paymentAdmissionTaskPatchRequest);


    @ApiOperation(value = "Fetch advice", nickname = "transactionPaymentsIdAdvicesAdviceIdGet", notes = "", response = AdviceDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Advice details", response = AdviceDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/advices/{adviceId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AdviceDetailsResponse> transactionPaymentsIdAdvicesAdviceIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Advice Id",required=true) @PathVariable("adviceId") UUID adviceId);


    @ApiOperation(value = "create advice submission", nickname = "transactionPaymentsIdAdvicesAdviceIdSubmissionsPost", notes = "", response = AdviceSubmissionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Advice submission creation response", response = AdviceSubmissionCreationResponse.class),
        @ApiResponse(code = 400, message = "Advice submission creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments/{id}/advices/{adviceId}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AdviceSubmissionCreationResponse> transactionPaymentsIdAdvicesAdviceIdSubmissionsPost(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Advice Id",required=true) @PathVariable("adviceId") UUID adviceId,@ApiParam(value = ""  )  @Valid @RequestBody AdviceSubmissionCreation adviceSubmissionCreationRequest);


    @ApiOperation(value = "Fetch advice submission", nickname = "transactionPaymentsIdAdvicesAdviceIdSubmissionsSubmissionIdGet", notes = "", response = AdviceSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Advice submission details", response = AdviceSubmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/advices/{adviceId}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AdviceSubmissionDetailsResponse> transactionPaymentsIdAdvicesAdviceIdSubmissionsSubmissionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Advice Id",required=true) @PathVariable("adviceId") UUID adviceId,@ApiParam(value = "Submission Id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create advice", nickname = "transactionPaymentsIdAdvicesPost", notes = "", response = AdviceCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Advice creation response", response = AdviceCreationResponse.class),
        @ApiResponse(code = 400, message = "Advice creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments/{id}/advices",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AdviceCreationResponse> transactionPaymentsIdAdvicesPost(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody AdviceCreation adviceCreationRequest);


    @ApiOperation(value = "Fetch payment", nickname = "transactionPaymentsIdGet", notes = "", response = PaymentDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Payment details", response = PaymentDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<PaymentDetailsResponse> transactionPaymentsIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "Create recall", nickname = "transactionPaymentsIdRecallsPost", notes = "", response = RecallCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Recall creation response", response = RecallCreationResponse.class),
        @ApiResponse(code = 400, message = "Recall creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments/{id}/recalls",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<RecallCreationResponse> transactionPaymentsIdRecallsPost(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody RecallCreation recallCreationRequest);


    @ApiOperation(value = "Fetch recall admission", nickname = "transactionPaymentsIdRecallsRecallIdAdmissionsAdmissionIdGet", notes = "", response = RecallAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Recall admission details", response = RecallAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/recalls/{recallId}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<RecallAdmissionDetailsResponse> transactionPaymentsIdRecallsRecallIdAdmissionsAdmissionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId,@ApiParam(value = "Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Fetch recall decision admission", nickname = "transactionPaymentsIdRecallsRecallIdDecisionsDecisionIdAdmissionsAdmissionIdGet", notes = "", response = RecallDecisionAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Recall decision admission details", response = RecallDecisionAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<RecallDecisionAdmissionDetailsResponse> transactionPaymentsIdRecallsRecallIdDecisionsDecisionIdAdmissionsAdmissionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId,@ApiParam(value = "Decision Id",required=true) @PathVariable("decisionId") UUID decisionId,@ApiParam(value = "Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Fetch recall decision", nickname = "transactionPaymentsIdRecallsRecallIdDecisionsDecisionIdGet", notes = "", response = RecallDecisionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Recall decision details", response = RecallDecisionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<RecallDecisionDetailsResponse> transactionPaymentsIdRecallsRecallIdDecisionsDecisionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId,@ApiParam(value = "Decision Id",required=true) @PathVariable("decisionId") UUID decisionId);


    @ApiOperation(value = "create recall decision submission", nickname = "transactionPaymentsIdRecallsRecallIdDecisionsDecisionIdSubmissionsPost", notes = "", response = RecallDecisionSubmissionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Recall decision submission creation response", response = RecallDecisionSubmissionCreationResponse.class),
        @ApiResponse(code = 400, message = "Recall decision submission creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<RecallDecisionSubmissionCreationResponse> transactionPaymentsIdRecallsRecallIdDecisionsDecisionIdSubmissionsPost(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId,@ApiParam(value = "Decision Id",required=true) @PathVariable("decisionId") UUID decisionId,@ApiParam(value = ""  )  @Valid @RequestBody RecallDecisionSubmissionCreation recallDecisionSubmissionCreationRequest);


    @ApiOperation(value = "Fetch recall decision submission", nickname = "transactionPaymentsIdRecallsRecallIdDecisionsDecisionIdSubmissionsSubmissionIdGet", notes = "", response = RecallDecisionSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Recall decision submission details", response = RecallDecisionSubmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<RecallDecisionSubmissionDetailsResponse> transactionPaymentsIdRecallsRecallIdDecisionsDecisionIdSubmissionsSubmissionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId,@ApiParam(value = "Decision Id",required=true) @PathVariable("decisionId") UUID decisionId,@ApiParam(value = "Submission Id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create recall decision", nickname = "transactionPaymentsIdRecallsRecallIdDecisionsPost", notes = "", response = RecallDecisionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Recall decision creation response", response = RecallDecisionCreationResponse.class),
        @ApiResponse(code = 400, message = "Recall decision creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments/{id}/recalls/{recallId}/decisions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<RecallDecisionCreationResponse> transactionPaymentsIdRecallsRecallIdDecisionsPost(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId,@ApiParam(value = ""  )  @Valid @RequestBody RecallDecisionCreation recallDecisionCreationRequest);


    @ApiOperation(value = "Fetch recall", nickname = "transactionPaymentsIdRecallsRecallIdGet", notes = "", response = RecallDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Recall details", response = RecallDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/recalls/{recallId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<RecallDetailsResponse> transactionPaymentsIdRecallsRecallIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId);


    @ApiOperation(value = "Fetch recall reversal admission", nickname = "transactionPaymentsIdRecallsRecallIdReversalsReversalIdAdmissionsAdmissionIdGet", notes = "", response = RecallReversalAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Reversal admission details", response = RecallReversalAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/recalls/{recallId}/reversals/{reversalId}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<RecallReversalAdmissionDetailsResponse> transactionPaymentsIdRecallsRecallIdReversalsReversalIdAdmissionsAdmissionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId,@ApiParam(value = "Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Fetch recall reversal", nickname = "transactionPaymentsIdRecallsRecallIdReversalsReversalIdGet", notes = "", response = RecallReversalDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Recall Reversal details", response = RecallReversalDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/recalls/{recallId}/reversals/{reversalId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<RecallReversalDetailsResponse> transactionPaymentsIdRecallsRecallIdReversalsReversalIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId);


    @ApiOperation(value = "create recall submission", nickname = "transactionPaymentsIdRecallsRecallIdSubmissionsPost", notes = "", response = RecallSubmissionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Recall submission creation response", response = RecallSubmissionCreationResponse.class),
        @ApiResponse(code = 400, message = "Recall submission creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments/{id}/recalls/{recallId}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<RecallSubmissionCreationResponse> transactionPaymentsIdRecallsRecallIdSubmissionsPost(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId,@ApiParam(value = ""  )  @Valid @RequestBody RecallSubmissionCreation recallSubmissionCreationRequest);


    @ApiOperation(value = "Fetch recall submission", nickname = "transactionPaymentsIdRecallsRecallIdSubmissionsSubmissionIdGet", notes = "", response = RecallSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Recall submission details", response = RecallSubmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/recalls/{recallId}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<RecallSubmissionDetailsResponse> transactionPaymentsIdRecallsRecallIdSubmissionsSubmissionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Recall Id",required=true) @PathVariable("recallId") UUID recallId,@ApiParam(value = "Submission Id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create return", nickname = "transactionPaymentsIdReturnsPost", notes = "", response = ReturnCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Return creation response", response = ReturnCreationResponse.class),
        @ApiResponse(code = 400, message = "Return creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments/{id}/returns",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ReturnCreationResponse> transactionPaymentsIdReturnsPost(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody ReturnCreation returnCreationRequest);


    @ApiOperation(value = "Fetch return admission", nickname = "transactionPaymentsIdReturnsReturnIdAdmissionsAdmissionIdGet", notes = "", response = ReturnAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return admission details", response = ReturnAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/returns/{returnId}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ReturnAdmissionDetailsResponse> transactionPaymentsIdReturnsReturnIdAdmissionsAdmissionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId,@ApiParam(value = "Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Fetch return", nickname = "transactionPaymentsIdReturnsReturnIdGet", notes = "", response = ReturnDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return details", response = ReturnDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/returns/{returnId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ReturnDetailsResponse> transactionPaymentsIdReturnsReturnIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId);


    @ApiOperation(value = "Create return reversal", nickname = "transactionPaymentsIdReturnsReturnIdReversalsPost", notes = "", response = ReturnReversalCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Reversal creation response", response = ReturnReversalCreationResponse.class),
        @ApiResponse(code = 400, message = "Reversal creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments/{id}/returns/{returnId}/reversals",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ReturnReversalCreationResponse> transactionPaymentsIdReturnsReturnIdReversalsPost(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId,@ApiParam(value = ""  )  @Valid @RequestBody ReturnReversalCreation returnReversalCreationRequest);


    @ApiOperation(value = "Fetch return reversal admission", nickname = "transactionPaymentsIdReturnsReturnIdReversalsReversalIdAdmissionsAdmissionIdGet", notes = "", response = ReturnReversalAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return reversal admission details", response = ReturnReversalAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/returns/{returnId}/reversals/{reversalId}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ReturnReversalAdmissionDetailsResponse> transactionPaymentsIdReturnsReturnIdReversalsReversalIdAdmissionsAdmissionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId,@ApiParam(value = "Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Fetch return reversal", nickname = "transactionPaymentsIdReturnsReturnIdReversalsReversalIdGet", notes = "", response = ReturnReversalDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return reversal details", response = ReturnReversalDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/returns/{returnId}/reversals/{reversalId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ReturnReversalDetailsResponse> transactionPaymentsIdReturnsReturnIdReversalsReversalIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId);


    @ApiOperation(value = "create return submission", nickname = "transactionPaymentsIdReturnsReturnIdSubmissionsPost", notes = "", response = ReturnSubmissionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Return submission creation response", response = ReturnSubmissionCreationResponse.class),
        @ApiResponse(code = 400, message = "Return submission creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments/{id}/returns/{returnId}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ReturnSubmissionCreationResponse> transactionPaymentsIdReturnsReturnIdSubmissionsPost(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId,@ApiParam(value = ""  )  @Valid @RequestBody ReturnSubmissionCreation returnSubmissionCreationRequest);


    @ApiOperation(value = "Fetch return submission", nickname = "transactionPaymentsIdReturnsReturnIdSubmissionsSubmissionIdGet", notes = "", response = ReturnSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return submission details", response = ReturnSubmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/returns/{returnId}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ReturnSubmissionDetailsResponse> transactionPaymentsIdReturnsReturnIdSubmissionsSubmissionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Return Id",required=true) @PathVariable("returnId") UUID returnId,@ApiParam(value = "Submission Id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create reversal", nickname = "transactionPaymentsIdReversalsPost", notes = "", response = ReversalCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Reversal creation response", response = ReversalCreationResponse.class),
        @ApiResponse(code = 400, message = "Reversal creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments/{id}/reversals",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ReversalCreationResponse> transactionPaymentsIdReversalsPost(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody ReversalCreation reversalCreationRequest);


    @ApiOperation(value = "Fetch reversal admission", nickname = "transactionPaymentsIdReversalsReversalIdAdmissionsAdmissionIdGet", notes = "", response = ReversalAdmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Reversal admission details", response = ReversalAdmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/reversals/{reversalId}/admissions/{admissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ReversalAdmissionDetailsResponse> transactionPaymentsIdReversalsReversalIdAdmissionsAdmissionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId,@ApiParam(value = "Admission Id",required=true) @PathVariable("admissionId") UUID admissionId);


    @ApiOperation(value = "Fetch reversal", nickname = "transactionPaymentsIdReversalsReversalIdGet", notes = "", response = ReversalDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Reversal details", response = ReversalDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/reversals/{reversalId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ReversalDetailsResponse> transactionPaymentsIdReversalsReversalIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId);


    @ApiOperation(value = "Create reversal submission", nickname = "transactionPaymentsIdReversalsReversalIdSubmissionsPost", notes = "", response = ReversalSubmissionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Reversal submission creation response", response = ReversalSubmissionCreationResponse.class),
        @ApiResponse(code = 400, message = "Reversal submission creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments/{id}/reversals/{reversalId}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnc.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ReversalSubmissionCreationResponse> transactionPaymentsIdReversalsReversalIdSubmissionsPost(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId,@ApiParam(value = ""  )  @Valid @RequestBody ReversalSubmissionCreation reversalSubmissionCreationRequest);


    @ApiOperation(value = "Fetch reversal submission", nickname = "transactionPaymentsIdReversalsReversalIdSubmissionsSubmissionIdGet", notes = "", response = ReversalSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Reversal submission details", response = ReversalSubmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/reversals/{reversalId}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ReversalSubmissionDetailsResponse> transactionPaymentsIdReversalsReversalIdSubmissionsSubmissionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Reversal Id",required=true) @PathVariable("reversalId") UUID reversalId,@ApiParam(value = "Submission Id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "create submission", nickname = "transactionPaymentsIdSubmissionsPost", notes = "", response = PaymentSubmissionCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Submission creation response", response = PaymentSubmissionCreationResponse.class),
        @ApiResponse(code = 400, message = "Submission creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments/{id}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PaymentSubmissionCreationResponse> transactionPaymentsIdSubmissionsPost(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = ""  )  @Valid @RequestBody PaymentSubmissionCreation submissionCreationRequest);


    @ApiOperation(value = "Fetch submission", nickname = "transactionPaymentsIdSubmissionsSubmissionIdGet", notes = "", response = PaymentSubmissionDetailsResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Submission details", response = PaymentSubmissionDetailsResponse.class) })
    @RequestMapping(value = "/transaction/payments/{id}/submissions/{submissionId}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<PaymentSubmissionDetailsResponse> transactionPaymentsIdSubmissionsSubmissionIdGet(@ApiParam(value = "Payment Id",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Submission Id",required=true) @PathVariable("submissionId") UUID submissionId);


    @ApiOperation(value = "Create payment", nickname = "transactionPaymentsPost", notes = "", response = PaymentCreationResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "Payments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Payment creation response", response = PaymentCreationResponse.class),
        @ApiResponse(code = 400, message = "Payment creation error", response = ApiError.class) })
    @RequestMapping(value = "/transaction/payments",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PaymentCreationResponse> transactionPaymentsPost(@ApiParam(value = ""  )  @Valid @RequestBody PaymentCreation paymentCreationRequest);


    @ApiOperation(value = "Get Query", nickname = "transactionQueriesGet", notes = "", response = QueryListResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "query_api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Query response", response = QueryListResponse.class),
        @ApiResponse(code = 400, message = "Query bad request", response = ApiError.class),
        @ApiResponse(code = 502, message = "Query gateway issue", response = ApiError.class) })
    @RequestMapping(value = "/transaction/queries",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<QueryListResponse> transactionQueriesGet(@ApiParam(value = "The organisations to filter on") @Valid @RequestParam(value = "filter[organisation_id]", required = false) List<UUID> filterOrganisationId,@ApiParam(value = "Find all queries for a given status", allowableValues = "pending, closed") @Valid @RequestParam(value = "filter[status]", required = false) String filterStatus,@ApiParam(value = "Find all queries for a given query type") @Valid @RequestParam(value = "filter[query_type]", required = false) String filterQueryType,@ApiParam(value = "Find all queries for given auto handled flag") @Valid @RequestParam(value = "filter[auto_handled]", required = false) Boolean filterAutoHandled,@ApiParam(value = "Find all queries from a certain value date.") @Valid @RequestParam(value = "filter[processing_date_from]", required = false) LocalDate filterProcessingDateFrom,@ApiParam(value = "Find all queries up to a certain value date.") @Valid @RequestParam(value = "filter[processing_date_to]", required = false) LocalDate filterProcessingDateTo,@ApiParam(value = "Find all queries from a certain created date.") @Valid @RequestParam(value = "filter[created_on_from]", required = false) OffsetDateTime filterCreatedOnFrom,@ApiParam(value = "Find all queries up to a certain created date.") @Valid @RequestParam(value = "filter[created_on_to]", required = false) OffsetDateTime filterCreatedOnTo,@ApiParam(value = "Find all queries with a certain payment id.") @Valid @RequestParam(value = "filter[payment.id]", required = false) UUID filterPaymentId,@ApiParam(value = "Find all queries with a certain payment admission id.") @Valid @RequestParam(value = "filter[payment_admission.id]", required = false) UUID filterPaymentAdmissionId,@ApiParam(value = "Find all queries with a certain payment submission id.") @Valid @RequestParam(value = "filter[payment_submission.id]", required = false) UUID filterPaymentSubmissionId,@ApiParam(value = "Find all queries with a certain recall id.") @Valid @RequestParam(value = "filter[recall.id]", required = false) UUID filterRecallId,@ApiParam(value = "Find all queries with a certain recall submission id.") @Valid @RequestParam(value = "filter[recall_submission.id]", required = false) UUID filterRecallSubmissionId,@ApiParam(value = "Find all queries with a certain query id.") @Valid @RequestParam(value = "filter[query.id]", required = false) UUID filterQueryId,@Pattern(regexp="$[A-z0-9]{4}^") @DecimalMin("0")@ApiParam(value = "Which page to select") @Valid @RequestParam(value = "page[number]", required = false) String pageNumber,@Min(0) @Max(1000) @ApiParam(value = "Number of items to select") @Valid @RequestParam(value = "page[size]", required = false) Integer pageSize);


    @ApiOperation(value = "Create a Query", nickname = "transactionQueriesPost", notes = "", response = QueryFetchResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "query_api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "creation response", response = QueryFetchResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "forbidden", response = ApiError.class),
        @ApiResponse(code = 502, message = "gateway issue", response = ApiError.class) })
    @RequestMapping(value = "/transaction/queries",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<QueryFetchResponse> transactionQueriesPost(@ApiParam(value = ""  )  @Valid @RequestBody QueryCreation creationRequest);


    @ApiOperation(value = "Fetch a Query Admission", nickname = "transactionQueriesQueryIdAdmissionsQueryAdmissionIdGet", notes = "", response = QueryAdmissionResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "query_api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "query admission response", response = QueryAdmissionResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "forbidden", response = ApiError.class) })
    @RequestMapping(value = "/transaction/queries/{query_id}/admissions/{query_admission_id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<QueryAdmissionResponse> transactionQueriesQueryIdAdmissionsQueryAdmissionIdGet(@ApiParam(value = "Query ID",required=true) @PathVariable("query_id") UUID queryId,@ApiParam(value = "Query Admission ID",required=true) @PathVariable("query_admission_id") UUID queryAdmissionId);


    @ApiOperation(value = "Fetch a Query", nickname = "transactionQueriesQueryIdGet", notes = "", response = QueryFetchResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "query_api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "query response", response = QueryFetchResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "forbidden", response = ApiError.class) })
    @RequestMapping(value = "/transaction/queries/{query_id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<QueryFetchResponse> transactionQueriesQueryIdGet(@ApiParam(value = "Query ID",required=true) @PathVariable("query_id") UUID queryId);


    @ApiOperation(value = "Create a Query Response", nickname = "transactionQueriesQueryIdResponsesPost", notes = "", response = QueryResponseResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "query_api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "creation response", response = QueryResponseResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "forbidden", response = ApiError.class),
        @ApiResponse(code = 502, message = "gateway issue", response = ApiError.class) })
    @RequestMapping(value = "/transaction/queries/{query_id}/responses",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<QueryResponseResponse> transactionQueriesQueryIdResponsesPost(@ApiParam(value = "Query ID",required=true) @PathVariable("query_id") UUID queryId,@ApiParam(value = ""  )  @Valid @RequestBody QueryResponseCreation creationRequest);


    @ApiOperation(value = "Fetch a Query Response Admission", nickname = "transactionQueriesQueryIdResponsesQueryResponseIdAdmissionsQueryResponseAdmissionIdGet", notes = "", response = QueryResponseAdmissionResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "query_api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "query response admission response", response = QueryResponseAdmissionResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "forbidden", response = ApiError.class) })
    @RequestMapping(value = "/transaction/queries/{query_id}/responses/{query_response_id}/admissions/{query_response_admission_id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<QueryResponseAdmissionResponse> transactionQueriesQueryIdResponsesQueryResponseIdAdmissionsQueryResponseAdmissionIdGet(@ApiParam(value = "Query ID",required=true) @PathVariable("query_id") UUID queryId,@ApiParam(value = "Query Response ID",required=true) @PathVariable("query_response_id") UUID queryResponseId,@ApiParam(value = "Query Response Admission ID",required=true) @PathVariable("query_response_admission_id") UUID queryResponseAdmissionId);


    @ApiOperation(value = "Fetch a Query Response", nickname = "transactionQueriesQueryIdResponsesQueryResponseIdGet", notes = "", response = QueryResponseResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "query_api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "query response response", response = QueryResponseResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "forbidden", response = ApiError.class) })
    @RequestMapping(value = "/transaction/queries/{query_id}/responses/{query_response_id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<QueryResponseResponse> transactionQueriesQueryIdResponsesQueryResponseIdGet(@ApiParam(value = "Query ID",required=true) @PathVariable("query_id") UUID queryId,@ApiParam(value = "Query Response ID",required=true) @PathVariable("query_response_id") UUID queryResponseId);


    @ApiOperation(value = "Create a Query Response Submission", nickname = "transactionQueriesQueryIdResponsesQueryResponseIdSubmissionsPost", notes = "", response = QueryResponseSubmissionResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "query_api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "creation response", response = QueryResponseSubmissionResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "forbidden", response = ApiError.class),
        @ApiResponse(code = 502, message = "gateway issue", response = ApiError.class) })
    @RequestMapping(value = "/transaction/queries/{query_id}/responses/{query_response_id}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<QueryResponseSubmissionResponse> transactionQueriesQueryIdResponsesQueryResponseIdSubmissionsPost(@ApiParam(value = "Query ID",required=true) @PathVariable("query_id") UUID queryId,@ApiParam(value = "Query Response ID",required=true) @PathVariable("query_response_id") UUID queryResponseId,@ApiParam(value = ""  )  @Valid @RequestBody QueryResponseSubmissionCreation creationRequest);


    @ApiOperation(value = "Fetch a Query Response Submission", nickname = "transactionQueriesQueryIdResponsesQueryResponseIdSubmissionsQueryResponseSubmissionIdGet", notes = "", response = QueryResponseSubmissionResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "query_api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "query response submission response", response = QueryResponseSubmissionResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "forbidden", response = ApiError.class) })
    @RequestMapping(value = "/transaction/queries/{query_id}/responses/{query_response_id}/submissions/{query_response_submission_id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<QueryResponseSubmissionResponse> transactionQueriesQueryIdResponsesQueryResponseIdSubmissionsQueryResponseSubmissionIdGet(@ApiParam(value = "Query ID",required=true) @PathVariable("query_id") UUID queryId,@ApiParam(value = "Query Response ID",required=true) @PathVariable("query_response_id") UUID queryResponseId,@ApiParam(value = "Query Response Submission ID",required=true) @PathVariable("query_response_submission_id") UUID queryResponseSubmissionId);


    @ApiOperation(value = "Create a Query submission", nickname = "transactionQueriesQueryIdSubmissionsPost", notes = "", response = QuerySubmissionResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "query_api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "creation response", response = QuerySubmissionResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "forbidden", response = ApiError.class),
        @ApiResponse(code = 502, message = "gateway issue", response = ApiError.class) })
    @RequestMapping(value = "/transaction/queries/{query_id}/submissions",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<QuerySubmissionResponse> transactionQueriesQueryIdSubmissionsPost(@ApiParam(value = "Query ID",required=true) @PathVariable("query_id") UUID queryId,@ApiParam(value = ""  )  @Valid @RequestBody QuerySubmissionCreation creationRequest);


    @ApiOperation(value = "Fetch a Query submission", nickname = "transactionQueriesQueryIdSubmissionsQuerySubmissionIdGet", notes = "", response = QuerySubmissionResponse.class, authorizations = {
        @Authorization(value = "OAuth2", scopes = {
            
            })
    }, tags={ "query_api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "query submission response", response = QuerySubmissionResponse.class),
        @ApiResponse(code = 400, message = "bad request", response = ApiError.class),
        @ApiResponse(code = 403, message = "forbidden", response = ApiError.class) })
    @RequestMapping(value = "/transaction/queries/{query_id}/submissions/{query_submission_id}",
        produces = { "application/vnd.api+json", "application/json" }, 
        consumes = { "application/vnd.api+json", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<QuerySubmissionResponse> transactionQueriesQueryIdSubmissionsQuerySubmissionIdGet(@ApiParam(value = "Query ID",required=true) @PathVariable("query_id") UUID queryId,@ApiParam(value = "Query Submission ID",required=true) @PathVariable("query_submission_id") UUID querySubmissionId);

}
